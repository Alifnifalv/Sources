Act as a Prompt Enhancer AI that takes user-input prompts and transforms them
into more engaging, detailed, and thought-provoking questions. Describe ... [Expand]
"split the python code into multiple files based on the logic that implented int the given code and make multiple python files from it based on the logic as functions as each function or combination of function into a seperate file based on the logical process"

Okay, I can definitely act as a Prompt Enhancer AI! Here’s how I approach transforming simple prompts into richer, more effective questions:

My Prompt Enhancement Process:

Deconstruct and Understand the Core Intent: I first break down the user's prompt to grasp the fundamental action they want to take or the information they seek. I identify the keywords, verbs, and nouns to understand the subject matter and the desired outcome.

Identify Implicit Needs and Context: Often, simple prompts are missing crucial context. I try to infer the why behind the prompt. What are the user's underlying goals? What problem are they trying to solve? What kind of response are they hoping for? This involves asking myself questions like:

What is the user really trying to achieve with this?
What assumptions are they making?
What background knowledge are they likely to have (or lack)?
What kind of answer would be most helpful and actionable for them?
Expand on Keywords and Concepts: I look for opportunities to enrich the prompt by:

Adding detail and specificity: Vague terms are replaced with more precise language.
Exploring related concepts: I introduce related ideas that might broaden the scope and depth of the response.
Considering different perspectives: I encourage exploration from multiple angles to avoid narrow or simplistic answers.
Adding constraints or parameters: If appropriate, I might suggest considering limitations or specific conditions to make the prompt more focused and realistic.
Structure for Clarity and Depth: I restructure the prompt to be more logically organized and easier to understand. This often involves:

Breaking down complex prompts into smaller, digestible parts.
Using question words (What, How, Why, When, Where, Who) to guide the response.
Employing bullet points or numbered lists for clarity and to encourage structured answers.
Adding an introductory context or framing to set the stage.
Encourage Critical Thinking and Nuance: A good enhanced prompt shouldn't just ask for a simple answer. It should stimulate deeper thought, encourage exploration of complexities, and promote nuanced responses. This means:

Moving beyond simple "yes/no" or factual answers.
Asking "Why?" and "How?" questions to probe reasoning and process.
Encouraging consideration of pros and cons, trade-offs, and alternative approaches.
Prompting reflection on implications, consequences, and broader context.
Types of Improvements I Make:

Clarity and Precision: Eliminating ambiguity and using more specific language.
Contextualization: Adding background information and framing to give the prompt more meaning.
Depth and Complexity: Encouraging exploration of multiple facets and nuanced perspectives.
Actionability and Practicality: Focusing the prompt on real-world application and useful outcomes.
Engagement and Interest: Making the prompt more thought-provoking and stimulating for the respondent.
Structure and Organization: Improving the logical flow and readability of the prompt.
Example: Enhancing the User's Prompt about Python Code Splitting

Original Prompt (User Input):

"split the python code into multiple files based on the logic that implented int the given code and make multiple python files from it based on the logic as functions as each function or combination of function into a seperate file based on the logical process"

Analysis of Original Prompt:

Core Intent: The user wants to refactor a Python codebase by splitting it into multiple files.
Keywords: "split," "python code," "multiple files," "logic," "functions," "separate file," "logical process."
Issues:
Grammar and spelling errors ("implented," "int," "seperate").
Repetitive phrasing ("based on the logic... based on the logical process").
Vague terms ("logic," "logical process"). What kind of logic? What constitutes a logical process for splitting?
Lack of context. Why does the user want to split the code? What are their goals? What are they hoping to achieve?
Enhanced Prompt:

Let's transform this into a more insightful and helpful prompt using my process:

Enhanced Prompt:

"I have a Python codebase that is currently in a single file and I'd like to refactor it into multiple files for better organization and maintainability. To help me effectively split this code, could you guide me through a process based on logical groupings of functions?

To provide the most helpful advice, please consider the following questions and aspects:

Understanding the Code's Purpose: Before diving into the code, could you outline a strategy for first understanding the overall purpose and functional domains of the existing codebase? What are some initial steps I should take to get a high-level view of its logic?
Defining "Logical Groupings": What criteria should I use to define "logical groupings" of functions? Should I focus on:
Functional Cohesion: Grouping functions that perform related tasks within a specific module or component?
Data Dependencies: Grouping functions that operate on the same data structures or entities?
Business Logic Domains: Structuring files based on distinct areas of business functionality the code implements?
Other approaches? Are there alternative or complementary methods for defining logical groupings I should consider?
Practical Steps for Splitting: Once I have identified logical groupings, what are the practical steps to actually split the code into separate Python files? This could include:
Identifying file boundaries and naming conventions.
Managing dependencies between files (imports).
Considering potential circular dependencies and how to avoid or resolve them.
Testing strategies to ensure the refactored code still functions correctly.
Best Practices and Considerations: Are there any general best practices or common pitfalls I should be aware of when splitting a Python codebase into multiple files? For example, considerations around:
Modularity and reusability.
Code readability and maintainability.
Potential performance implications (if any).
Example Scenario (Optional): If possible, could you illustrate this process with a simplified example? Perhaps a small hypothetical codebase and how you would approach splitting it logically?
By addressing these questions, I hope to gain a clear and actionable strategy for refactoring my Python code into a more modular and manageable structure."

Explanation of Enhancements:

Clarity and Grammar: Corrected spelling and grammar, rephrased for better flow.
Contextualization (Why): Added the user's motivation – "better organization and maintainability." This helps the AI understand the goal.
Defined Key Terminology: Introduced "functional domains" and expanded on "logical groupings" by providing specific criteria (functional cohesion, data dependencies, business logic domains).
Structured Questions: Broke down the prompt into numbered questions, making it easier to understand and answer. Used question words (What, How) to guide the response.
Practical Focus: Added questions about practical steps like file naming, dependencies, testing, and best practices.
Encouraged Deeper Thinking: The questions prompt the AI (and the user, if this were for a human) to think about different approaches, criteria, and potential challenges.
Example Request: Included an optional request for an example to further clarify the process.
Positive Framing: Ended with a statement of desired outcome ("clear and actionable strategy") to reinforce the purpose.
Outcome of Enhanced Prompt:

The enhanced prompt is significantly more detailed and thought-provoking. It moves beyond a simple request to "split the code" and encourages a more comprehensive and strategic approach to refactoring. It is more likely to elicit a helpful, insightful, and actionable response that truly addresses the user's underlying needs. It guides the AI (or a human expert) to provide a well-structured and thorough answer, rather than just a superficial or generic one.