using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Eduegate.Domain.Entity.CustomEntity;
using Eduegate.Framework.Interfaces;
using Eduegate.Services.Contracts.Catalog;

namespace Eduegate.Domain.Mappers
{
    public class POSProductMapper : IDTOEntityMapper<POSProductDTO, ProductSKUDetail>
    {
        public static POSProductMapper Mapper { get { return new POSProductMapper(); } }

        public POSProductDTO ToDTO(ProductSKUDetail entity)
        {
            if (entity != null)
            {
                return new POSProductDTO()
                {
                    DeliveryCharge = entity.DeliveryCharge.HasValue ? entity.DeliveryCharge : 0,
                    ProductIID = entity.ProductIID,
                    ProductSKUMapIID = entity.ProductSKUMapIID,
                    Sequence = entity.Sequence,
                    SKU = entity.SKU,
                    ProductName = entity.ProductName,
                    SellingQuantityLimit = entity.SellingQuantityLimit,
                    ProductPrice = entity.ProductPrice,
                    CostPrice = entity.CostPrice,
                    Quantity = entity.Quantity,
                    ImageFile = entity.ImageFile,
                    Barcode = entity.Barcode,
                    PartNo = entity.PartNo,
                    CompanyID = entity.CompanyID,
                    BranchID = entity.BranchID,
                    LocationName = entity.LocationName,
                    LocationID = entity.LocationID,
                    LocationBarcode = entity.LocationBarcode,
                    // Unit price is actually product Price but we need this same name property to use in Sales and Purchase
                    UnitPrice = entity.ProductPrice,
                    WarrantyDate = DateTime.Now.AddDays(string.IsNullOrEmpty(entity.ProductWarranty) ? 0 : Convert.ToInt16(entity.ProductWarranty)),
                    IsSerialNumber = entity.IsSerialNumber,
                    IsSerialNumberOnPurchase = entity.IsSerialNumberOnPurchase != null ? entity.IsSerialNumberOnPurchase : false,
                    IsSerailNumberAutoGenerated = entity.IsSerailNumberAutoGenerated != null ? entity.IsSerailNumberAutoGenerated : false,
                    ProductTypeName = entity.ProductTypeName,
                    ProductLength = entity.ProductLength,
                    Weight=entity.Weight,
                    TaxTemplateID = entity.TaxTemplateID,
                    TaxPercentage = entity.TaxPercentage,
                    HasTaxInclusive = entity.HasTaxInclusive
                };
            }
            else return new POSProductDTO();
        }


        public ProductSKUDetail ToEntity(POSProductDTO dto)
        {
            if (dto != null)
            {
                return new ProductSKUDetail()
                {
                    DeliveryCharge = dto.DeliveryCharge.HasValue ? dto.DeliveryCharge : 0,
                    ProductIID = dto.ProductIID,
                    ProductSKUMapIID = dto.ProductSKUMapIID,
                    Sequence = dto.Sequence,
                    SKU = dto.SKU,
                    ProductName = dto.ProductName,
                    SellingQuantityLimit = dto.SellingQuantityLimit,
                    ProductPrice = dto.ProductPrice,
                    CostPrice = dto.CostPrice,
                    Quantity = dto.Quantity,
                    ImageFile = dto.ImageFile,
                    Barcode = dto.Barcode,
                    PartNo = dto.PartNo,
                    CompanyID = dto.CompanyID,
                    BranchID = dto.BranchID,
                    LocationName = dto.LocationName,
                    LocationID = dto.LocationID,
                    LocationBarcode = dto.LocationBarcode,
                    ProductTypeName = dto.ProductTypeName,
                    ProductLength = dto.ProductLength,
                    Weight = dto.Weight,
                };
            }
            else return new ProductSKUDetail();
        }

    }
}
