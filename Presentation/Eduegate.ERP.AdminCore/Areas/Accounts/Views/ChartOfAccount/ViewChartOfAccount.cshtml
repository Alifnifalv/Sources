@model Eduegate.Web.Library.ViewModels.Accounts.ChartOfAccountViewModel
@{
    Layout = null;
    ViewData["Title"] = "Account Master";
}

<div id="ViewChartOfAccounts" class="windowcontainer" ng-controller="ChartOfAccountController" ng-init='InitializeChartOfAccount(@Html.Raw(System.Web.HttpUtility.JavaScriptStringEncode(Newtonsoft.Json.JsonConvert.SerializeObject(Model), true)))' ng-cloak>

    <div class="row">
        <!-- Tree View Panel -->
        <div class="col-md-5">
            <div class="card h-100">
                <div class="card-header" style="background-color: #f8f9fa; border-bottom: 1px solid #dee2e6;">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0" style="font-weight: 600;">Chart of Accounts</h6>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-secondary" ng-click="expandAll()" title="Expand All">
                                <i class="fas fa-expand-arrows-alt"></i>
                            </button>
                            <button class="btn btn-outline-secondary" ng-click="collapseAll()" title="Collapse All">
                                <i class="fas fa-compress-arrows-alt"></i>
                            </button>
                            <button class="btn btn-outline-secondary" ng-click="refreshTree()" ng-disabled="isLoading" title="Refresh">
                                <i class="fas fa-sync-alt" ng-class="{'fa-spin': isLoading}"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Search Box -->
                    <div class="mt-2">
                        <div class="input-group input-group-sm">
                            <input type="text" class="form-control" placeholder="Search accounts..."
                                   ng-model="searchTerm" ng-change="searchAccounts()" id="accountSearch">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" ng-click="clearSearch()">
                                    <i class="fas fa-times" ng-if="searchTerm"></i>
                                    <i class="fas fa-search" ng-if="!searchTerm"></i>
                                </button>
                            </div>
                        </div>
                        <small class="text-muted" ng-if="searchResults.length > 0">
                            Found {{searchResults.length}} result(s)
                        </small>
                    </div>
                </div>
                <div class="card-body p-0">
                    <!-- Loading indicator -->
                    <div ng-show="isLoading" class="text-center p-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                        <p class="mt-2 text-muted">Loading chart of accounts...</p>
                    </div>

                    <!-- Tree container -->
                    <div id="tree-container"
                         ng-show="!isLoading"
                         class="border-0 p-3"
                         style="height: 600px; overflow-y: auto; background-color: #fafafa;">
                    </div>

                    <!-- Empty state -->
                    <div ng-show="!isLoading && accounts.length === 0" class="text-center p-4">
                        <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                        <h6 class="text-muted">No accounts found</h6>
                    </div>

                    <!-- Instructions -->
                    <div ng-hide="isLoading" class="mt-3 px-3">
                        <small class="text-muted">
                            <i class="fas fa-info-circle"></i>
                            <strong>Instructions:</strong>
                            Click to select • Right-click for menu • Drag tree nodes to reorganize • Drag table items to create accounts
                        </small>
                        <br>
                        <small class="text-info mt-1 d-block">
                            <i class="fas fa-arrows-alt"></i>
                            <strong>Try:</strong> Drag any table row to tree nodes to create accounts
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Details Panel -->
        <div class="col-md-7">
            <div class="card h-100">
                <div class="card-header" style="background-color: #f8f9fa; border-bottom: 1px solid #dee2e6;">
                    <h6 class="mb-0" style="font-weight: 600;">Account Details</h6>
                </div>
                <div class="card-body">
                    <!-- Selected account information -->
                    <div ng-if="selectedLedgerData">
                        <!-- Account Name Header -->
                        <div class="mb-3">
                            <h4 class="text-primary mb-0" style="font-weight: 600; color: #007bff !important;">
                                {{selectedLedgerData.AccountName || selectedLedgerData.AccountGroupName}}
                            </h4>
                        </div>

                        <!-- Account Details Grid -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="text-muted small" style="font-weight: 500; text-transform: uppercase;">ACCOUNT GROUP ID:</label>
                                    <div style="font-weight: 500; color: #495057;">{{selectedLedgerData.AccountGroupID}}</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="text-muted small" style="font-weight: 500; text-transform: uppercase;">ACCOUNT CODE:</label>
                                    <div style="font-weight: 500; color: #495057;">{{selectedLedgerData.AccountCode}}</div>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="text-muted small" style="font-weight: 500; text-transform: uppercase;">ACCOUNT NAME:</label>
                                    <div style="font-weight: 500; color: #495057;">{{selectedLedgerData.AccountName || selectedLedgerData.AccountGroupName}}</div>
                                </div>
                            </div>
                        </div>

                        <!-- CORRECTED: Action buttons with proper conditional enabling -->
                        <div class="mb-4">
                            <button type="button" class="btn btn-primary me-2" style="margin-right: 8px;"
                                    ng-click="viewLedgerData(selectedLedgerData)"
                                    ng-disabled="!canViewLedger(selectedLedgerData)"
                                    title="{{canViewLedger(selectedLedgerData) ? 'View ledger transactions' : 'Available only for leaf accounts'}}">
                                <i class="fas fa-eye"></i> View Ledger
                            </button>
                            <button type="button" class="btn btn-success me-2" style="margin-right: 8px;"
                                    ng-click="OpenCreateAccount(selectedLedgerData)"
                                    ng-disabled="!canCreateLedger(selectedLedgerData)"
                                    title="{{canCreateLedger(selectedLedgerData) ? 'Create new account' : 'Available only for leaf accounts'}}">
                                <i class="fas fa-plus"></i> Create Account
                            </button>
                            <button type="button" class="btn btn-info" ng-click="OpenCreateGroup(selectedLedgerData)"
                                    ng-disabled="!canCreateGroup(selectedLedgerData)"
                                    title="Create new group">
                                <i class="fas fa-folder-plus"></i> Create Group
                            </button>
                        </div>

                        <!-- Parent Group Selection -->
                        <div class="mt-3" ng-show="selectedLedgerData && parentGroupOptions.length > 0">
                            <h6 class="text-muted">Parent Group Options</h6>
                            <div class="form-group">
                                <label for="parentGroupSelect">Move to Parent Group:</label>
                                <select class="form-control form-control-sm"
                                        id="parentGroupSelect"
                                        ng-model="selectedParentGroup"
                                        ng-options="option.id as option.label for option in parentGroupOptions">
                                    <option value="">Select new parent group...</option>
                                </select>
                                <button type="button"
                                        class="btn btn-warning btn-sm mt-2"
                                        ng-click="moveToParentGroup()"
                                        ng-disabled="!selectedParentGroup">
                                    <i class="fas fa-arrows-alt"></i> Move Here
                                </button>
                            </div>
                        </div>

                        <!-- CORRECTED: Ledger Transactions Table - Only for Leaf Nodes -->
                        <div class="mt-3" ng-show="canViewLedger(selectedLedgerData)">
                            <h5 style="font-weight: 600; color: #495057; margin-bottom: 15px;">
                                <i class="fas fa-table"></i> Ledger Transactions
                                <span ng-show="isLoadingLedger" class="spinner-border spinner-border-sm ml-2" role="status"></span>
                            </h5>

                            <div class="table-responsive" style="border: 1px solid #dee2e6; border-radius: 4px;">
                                <div id="account-table-container">
                                    <!-- Table will be rendered here by renderTable() -->
                                </div>
                            </div>

                            <!-- CORRECTED: Tip Box for Drag and Drop -->
                            <div id="tipBox" class="mt-3" style="background-color: #e3f2fd; border: 1px solid #bbdefb; border-radius: 4px; padding: 12px;">
                                <p class="mb-0" style="color: #1565c0; font-size: 13px;">
                                    <i class="fas fa-lightbulb" style="color: #ff9800; margin-right: 5px;"></i>
                                    <strong>Tip:</strong> Drag any row from the table above to a group in the chart of accounts tree on the left to add it as a new account.
                                </p>
                            </div>
                        </div>

                        <!-- Message for Non-Leaf Nodes -->
                        <div class="mt-3" ng-show="!canViewLedger(selectedLedgerData)" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 4px; padding: 15px;">
                            <p class="mb-0" style="color: #856404; font-size: 14px;">
                                <i class="fas fa-info-circle" style="margin-right: 8px;"></i>
                                <strong>Group Account Selected:</strong> Ledger transactions are only available for leaf accounts (accounts without sub-accounts).
                                This is a group account that can contain other accounts or groups.
                            </p>
                            <div class="mt-2">
                                <small class="text-muted">
                                    <strong>Available Actions:</strong> Create Group, Create Account (for leaf nodes only)
                                </small>
                            </div>
                        </div>
                    </div>

                    <!-- No selection state -->
                    <div ng-if="!selectedLedgerData" class="text-center py-5">
                        <i class="fas fa-hand-pointer fa-3x text-muted mb-3"></i>
                        <h6 class="text-muted">Select an Account</h6>
                        <p class="text-muted">Click on an account in the tree to view its details</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- CORRECTED: Fixed Modal Template with Proper Data Binding -->
<div id="ledgerModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="ledgerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ledgerModalLabel">
                    <i class="fas {{IsCreateLedger ? 'fa-plus' : 'fa-folder-plus'}}"></i>
                    {{ IsCreateLedger ? 'Create Account' : 'Create Group' }}
                    <span class="badge badge-light ml-2" ng-show="selectedAccountType">
                        {{getSelectedAccountTypeName()}}
                    </span>
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" ng-click="closeModal()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form name="ledgerForm" novalidate>
                    <!-- CORRECTED: Form Fields with Better Data Binding -->
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>{{ IsCreateLedger ? 'Account Code' : 'Group Code' }} <span class="text-danger">*</span></label>
                                <input type="text"
                                       class="form-control"
                                       ng-model="ledger.headNo"
                                       required
                                       name="headNo"
                                       placeholder="{{IsCreateLedger ? 'e.g. 10601' : 'e.g. 106'}}" />
                                <small class="form-text text-muted">
                                    {{IsCreateLedger ? 'Account code (auto-generated)' : 'Group code (auto-generated)'}}
                                </small>
                                <!-- DEBUG: Show current value -->
                                <small class="form-text text-info" ng-show="ledger.headNo">
                                    <i class="fas fa-check"></i> Current value: {{ledger.headNo}}
                                </small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>{{ IsCreateLedger ? 'Account Name' : 'Group Name' }} <span class="text-danger">*</span></label>
                                <input type="text"
                                       class="form-control"
                                       ng-model="ledger.name"
                                       required
                                       name="accountName"
                                       placeholder="{{IsCreateLedger ? 'Enter account name' : 'Enter group name'}}" />
                                <small class="form-text text-muted">
                                    {{IsCreateLedger ? 'Name of the account' : 'Name of the group'}}
                                </small>
                            </div>
                        </div>
                    </div>

                    <!-- CORRECTED: Under Account Field with Better Binding -->
                    <div class="form-group">
                        <label>Under Account</label>
                        <input type="text"
                               class="form-control"
                               ng-model="ledger.underDisplay"
                               readonly
                               style="background-color: #f8f9fa; font-weight: 500; border: 2px solid #28a745;"
                               placeholder="Parent account will be shown here">

                        <!-- SUCCESS MESSAGE -->
                        <small class="form-text text-success" ng-show="ledger.under && ledger.underDisplay">
                            <i class="fas fa-check-circle"></i>
                            This {{ IsCreateLedger ? 'account' : 'group' }} will be created under:
                            <strong>{{ledger.under.AccountName || ledger.under.AccountGroupName}}</strong>
                        </small>

                        <!-- WARNING MESSAGE -->
                        <small class="form-text text-warning" ng-show="!ledger.under || !ledger.underDisplay">
                            <i class="fas fa-exclamation-triangle"></i>
                            No parent account selected. Please select a parent from the tree first.
                        </small>

                        <!-- DEBUG INFO -->
                        <small class="form-text text-info" ng-show="ledger.underDisplay">
                            <i class="fas fa-info-circle"></i>
                            Display: {{ledger.underDisplay}}
                        </small>
                    </div>

                    <!-- CORRECTED: Account Type Selection with Better Loading Handling -->
                    <div class="form-group">
                        <label>Account Type <span class="text-danger">*</span></label>

                        <!-- LOADING STATE -->
                        <div class="alert alert-info alert-sm mb-3" ng-show="!AccountTypes || AccountTypes.length === 0">
                            <div class="text-center">
                                <div class="spinner-border spinner-border-sm mr-2" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                                <strong>Loading account types...</strong>
                                <button type="button" class="btn btn-sm btn-outline-primary ml-2" ng-click="LoadAccountTypes()">
                                    <i class="fas fa-redo"></i> Retry
                                </button>
                            </div>
                        </div>

                        <!-- AUTO-SELECTION SUCCESS -->
                        <div class="alert alert-success alert-sm mb-3" ng-show="selectedAccountType && AccountTypes.length > 0">
                            <div class="row align-items-center">
                                <div class="col-md-8">
                                    <i class="fas fa-check-circle"></i>
                                    <strong>Selected:</strong> {{getSelectedAccountTypeName()}}
                                    <br>
                                    <small class="text-muted">
                                        <i class="fas fa-arrow-up"></i>
                                        Based on parent: <strong>{{getTopParentNameEnhanced()}}</strong>
                                    </small>
                                </div>
                                <div class="col-md-4 text-right">
                                    <span class="badge badge-success badge-lg">Type {{selectedAccountType}}</span>
                                </div>
                            </div>
                        </div>

                        <!-- AUTO-SELECTION FAILED WARNING -->
                        <div class="alert alert-warning alert-sm mb-3" ng-show="!selectedAccountType && ledger.under && AccountTypes.length > 0">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>Auto-selection failed.</strong> Please select an account type manually.
                            <button type="button" class="btn btn-sm btn-warning ml-2" ng-click="forceAutoSelectEnhanced()">
                                <i class="fas fa-magic"></i> Retry Auto-Select
                            </button>
                        </div>

                        <!-- CORRECTED: Account Type Radio Buttons with Better Binding -->
                        <div class="account-type-selection-container" ng-show="AccountTypes && AccountTypes.length > 0">
                            <h6 class="mb-3">
                                <i class="fas fa-tags"></i> Select Account Type
                                <span class="badge badge-info badge-sm ml-2">{{AccountTypes.length}} types available</span>
                            </h6>
                            <div class="row">
                                <div class="col-md-6" ng-repeat="type in AccountTypes track by type.Key">
                                    <div class="account-type-option" ng-class="{'selected': selectedAccountType == type.Key}">
                                        <label class="account-type-label">
                                            <input type="radio"
                                                   ng-model="$parent.selectedAccountType"
                                                   ng-value="type.Key"
                                                   name="accountType"
                                                   id="accountType_{{type.Key}}"
                                                   ng-change="onAccountTypeChange(type.Key)">
                                            <span class="radio-custom-indicator"></span>
                                            <i class="fas {{getAccountTypeIcon(type.Key)}} type-icon text-{{getAccountTypeColor(type.Key)}}"></i>
                                            <span class="type-name">{{type.Value}}</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- CORRECTED: Debug Information Panel -->
                        <div class="debug-info-container">
                            <div class="debug-header" ng-click="debugExpanded = !debugExpanded">
                                <i class="fas fa-cog"></i> Debug Information
                                <i class="fas {{debugExpanded ? 'fa-chevron-up' : 'fa-chevron-down'}} float-right"></i>
                            </div>
                            <div class="debug-content" ng-show="debugExpanded">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="debug-item">
                                            <strong>Head No:</strong> {{ledger.headNo || 'Empty'}}
                                        </div>
                                        <div class="debug-item">
                                            <strong>Under Display:</strong> {{ledger.underDisplay || 'Empty'}}
                                        </div>
                                        <div class="debug-item">
                                            <strong>Under Object:</strong> {{(ledger.under.AccountName || ledger.under.AccountGroupName) || 'None'}}
                                        </div>
                                        <div class="debug-item">
                                            <strong>Selected Type:</strong> {{selectedAccountType || 'None'}}
                                        </div>
                                        <div class="debug-item">
                                            <strong>Type Name:</strong> {{getSelectedAccountTypeName() || 'None'}}
                                        </div>
                                        <div class="debug-item">
                                            <strong>Types Count:</strong> {{AccountTypes.length || 0}}
                                        </div>
                                        <div class="debug-item">
                                            <strong>Form Type:</strong> {{IsCreateLedger ? 'Account' : 'Group'}}
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <button type="button" class="btn btn-sm btn-info btn-block mb-1" ng-click="debugSelectionEnhanced()">
                                            <i class="fas fa-bug"></i> Debug Selection
                                        </button>
                                        <button type="button" class="btn btn-sm btn-warning btn-block mb-1" ng-click="forceAutoSelectEnhanced()">
                                            <i class="fas fa-magic"></i> Force Auto-Select
                                        </button>
                                        <button type="button" class="btn btn-sm btn-secondary btn-block mb-1" ng-click="resetFormData()">
                                            <i class="fas fa-redo"></i> Reset Form
                                        </button>
                                        <button type="button" class="btn btn-sm btn-primary btn-block mb-1" ng-click="LoadAccountTypes()">
                                            <i class="fas fa-download"></i> Reload Types
                                        </button>
                                        <button type="button" class="btn btn-sm btn-success btn-block" ng-click="refreshAccountTypes()">
                                            <i class="fas fa-sync"></i> Refresh Display
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" ng-click="closeModal()">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button type="button"
                        class="btn btn-primary"
                        ng-click="SaveAccounts()"
                        ng-disabled="!selectedAccountType || !ledger.name || !ledger.headNo || ledgerForm.$invalid">
                    <i class="fas fa-save"></i> Save {{ IsCreateLedger ? 'Account' : 'Group' }}
                    <span ng-if="selectedAccountType" class="badge badge-light ml-1">{{getSelectedAccountTypeName()}}</span>
                </button>
            </div>
        </div>
    </div>
</div>
<!-- Enhanced Context Menu -->
<div id="contextMenu" class="dropdown-menu shadow-sm" style="position: absolute; display: none; z-index: 9999; min-width: 180px;">
    <h6 class="dropdown-header" ng-if="contextNode">
        <i class="fas fa-folder"></i> {{contextNode.AccountName || contextNode.AccountGroupName}}
    </h6>
    <div class="dropdown-divider" ng-if="contextNode"></div>

    <!-- CORRECTED: Context menu items with proper conditions -->
    <a class="dropdown-item" href="#" ng-click="OpenCreateAccount(contextNode)" ng-show="canCreateLedger(contextNode)">
        <i class="fas fa-plus text-primary"></i> Create Account
    </a>
    <a class="dropdown-item" href="#" ng-click="OpenCreateGroup(contextNode)" ng-show="canCreateGroup(contextNode)">
        <i class="fas fa-layer-group text-info"></i> Create Group
    </a>
    <a class="dropdown-item" href="#" ng-click="viewLedgerData(contextNode)" ng-show="canViewLedger(contextNode)">
        <i class="fas fa-book text-success"></i> View Ledger
    </a>
    <div class="dropdown-divider"></div>
    <a class="dropdown-item text-danger" href="#" ng-click="deleteAccount(contextNode)">
        <i class="fas fa-trash text-danger"></i> Delete
    </a>
</div>

<style>
    /* Add ng-cloak to prevent flash of uncompiled content */
    [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
        display: none !important;
    }

    /* Search highlighting */
    .tree-node-item mark {
        background-color: #fff3cd;
        color: #856404;
        padding: 2px 4px;
        border-radius: 3px;
        font-weight: bold;
    }

    .tree-node-item.selected mark {
        background-color: rgba(255, 243, 205, 0.3);
        color: white;
    }

    /* Search box styling */
    .input-group-sm .form-control {
        font-size: 0.875rem;
    }

    .input-group-sm .btn {
        font-size: 0.875rem;
    }

    /* Button states */
    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

        .btn:disabled:hover {
            transform: none;
            box-shadow: none;
        }

    .btn-outline-secondary:hover:not(:disabled) {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
    }

    /* Enhanced Account Type Selection Styling */
    .account-type-selection-container {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border: 2px solid #dee2e6;
        border-radius: 12px;
        padding: 20px;
        margin: 15px 0;
    }

    .account-type-option {
        margin-bottom: 12px;
        transition: all 0.3s ease;
    }

        .account-type-option.selected {
            transform: scale(1.02);
            animation: pulseSelection 0.6s ease-in-out;
        }

    .account-type-label {
        display: flex;
        align-items: center;
        padding: 15px 18px;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        background: white;
        cursor: pointer;
        transition: all 0.3s ease;
        margin: 0;
        position: relative;
    }

        .account-type-label:hover {
            border-color: #007bff;
            background: #f0f8ff;
            transform: translateX(5px);
            box-shadow: 0 3px 10px rgba(0, 123, 255, 0.1);
        }

    .account-type-option.selected .account-type-label {
        border-color: #007bff;
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        color: #1565c0;
        font-weight: 600;
        transform: translateX(8px);
        box-shadow: 0 5px 15px rgba(0, 123, 255, 0.2);
    }

    .account-type-label input[type="radio"] {
        position: absolute;
        opacity: 0;
        width: 0;
        height: 0;
    }

    .radio-custom-indicator {
        width: 20px;
        height: 20px;
        border: 3px solid #adb5bd;
        border-radius: 50%;
        margin-right: 15px;
        position: relative;
        transition: all 0.3s ease;
    }

    .account-type-option.selected .radio-custom-indicator {
        border-color: #007bff;
        background: #007bff;
    }

        .account-type-option.selected .radio-custom-indicator::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 8px;
            height: 8px;
            background: white;
            border-radius: 50%;
            transform: translate(-50%, -50%);
        }

    .type-icon {
        margin-right: 12px;
        font-size: 18px;
        transition: all 0.3s ease;
    }

    .type-name {
        font-size: 16px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .account-type-option.selected .type-icon,
    .account-type-option.selected .type-name {
        color: #1565c0 !important;
    }

    /* Debug Panel Styling */
    .debug-info-container {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        margin-top: 20px;
        overflow: hidden;
    }

    .debug-header {
        background: #e9ecef;
        padding: 12px 15px;
        cursor: pointer;
        font-weight: 600;
        color: #495057;
        border-bottom: 1px solid #dee2e6;
        transition: all 0.3s ease;
    }

        .debug-header:hover {
            background: #dee2e6;
        }

    .debug-content {
        padding: 15px;
        font-size: 13px;
    }

    .debug-item {
        margin-bottom: 8px;
        padding: 5px 0;
        border-bottom: 1px dotted #dee2e6;
    }

        .debug-item:last-child {
            border-bottom: none;
        }

        .debug-item strong {
            color: #495057;
            min-width: 120px;
            display: inline-block;
        }

    /* Alert Enhancements */
    .alert-sm {
        padding: 12px 15px;
        font-size: 13px;
        border-radius: 8px;
        margin-bottom: 15px;
    }

    .alert-success {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border: 2px solid #b3d7cc;
        color: #155724;
    }

    .alert-warning {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        border: 2px solid #ffdf7e;
        color: #856404;
    }

    .badge-lg {
        font-size: 0.9em;
        padding: 6px 12px;
    }

    /* Modal Enhancements */
    .modal-header {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        color: white;
        border-bottom: none;
        border-radius: 8px 8px 0 0;
    }

    .modal-content {
        border: none;
        border-radius: 8px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }

    .modal-footer {
        background-color: #f8f9fa;
        border-top: 1px solid #dee2e6;
        border-radius: 0 0 8px 8px;
    }

    .modal-body {
        padding: 30px;
    }

    /* Form Field Enhancements */
    .form-control {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 12px 15px;
        transition: all 0.3s ease;
        font-size: 14px;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .form-group label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .form-text {
        font-size: 12px;
        margin-top: 5px;
    }

    /* Button Styling */
    .btn-primary .badge {
        background-color: rgba(255, 255, 255, 0.2) !important;
        color: white !important;
    }

    /* Tree Styling to match screenshot exactly */
    .basic-tree {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .tree-node-item {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        cursor: pointer;
        transition: all 0.2s ease;
        user-select: none;
        border-radius: 6px;
        margin: 2px 0;
        border: 1px solid transparent;
    }

        .tree-node-item:hover {
            background-color: #e8f4fd;
            border-color: #b3d9ff;
            transform: translateX(2px);
        }

        .tree-node-item.selected {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white !important;
            border-color: #0056b3;
            box-shadow: 0 2px 4px rgba(0, 123, 255, 0.3);
        }

            .tree-node-item.selected:hover {
                background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
                transform: translateX(2px);
            }

        .tree-node-item .expand-icon {
            width: 20px;
            text-align: center;
            cursor: pointer;
            user-select: none;
            margin-right: 8px;
            font-weight: bold;
            color: #6c757d;
            transition: color 0.3s ease;
        }

            .tree-node-item .expand-icon:hover {
                color: #495057;
            }

        .tree-node-item.selected .expand-icon {
            color: rgba(255, 255, 255, 0.9);
        }

        .tree-node-item .node-icon {
            margin-right: 10px;
            width: 16px;
            text-align: center;
            color: #6c757d;
        }

        .tree-node-item.selected .node-icon {
            color: rgba(255, 255, 255, 0.9);
        }

        .tree-node-item .node-text {
            flex-grow: 1;
            font-weight: 500;
        }

    /* Card styling to match screenshot */
    .card {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
        transition: box-shadow 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        }

    .card-header {
        background-color: #f8f9fa !important;
        border-bottom: 1px solid #dee2e6 !important;
        font-weight: 600;
        border-radius: 8px 8px 0 0 !important;
    }

    /* Drag and Drop Styles */
    .drop-target {
        background-color: #e3f2fd !important;
        border: 2px dashed #2196f3 !important;
        transform: scale(1.02);
    }

    .dragging {
        opacity: 0.6 !important;
        transform: rotate(2deg);
    }

    .tree-node-item[draggable="true"] {
        cursor: grab;
    }

        .tree-node-item[draggable="true"]:active {
            cursor: grabbing;
        }

    .draggable-row {
        cursor: grab;
        transition: all 0.3s ease;
    }

        .draggable-row:hover {
            background-color: #f8f9fa;
            transform: translateX(2px);
        }

        .draggable-row.dragging {
            opacity: 0.6;
            transform: rotate(-2deg);
        }

    .drag-handle {
        cursor: grab;
    }

        .drag-handle:active {
            cursor: grabbing;
        }

    body.dragging-table-item .tree-node-item {
        border: 2px dashed transparent;
        transition: all 0.3s ease;
    }

        body.dragging-table-item .tree-node-item:hover {
            border-color: #28a745;
            background-color: #d4edda;
        }

    /* Tree dragging specific styles */
    body.dragging-tree-item .tree-node-item {
        border: 2px dashed transparent;
        transition: all 0.3s ease;
    }

        body.dragging-tree-item .tree-node-item:hover {
            border-color: #007bff;
            background-color: #e3f2fd;
        }

        body.dragging-tree-item .tree-node-item.drop-target {
            border-color: #007bff !important;
            background-color: #e3f2fd !important;
            transform: scale(1.02);
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
        }

    .tree-node-item.dragging {
        opacity: 0.6 !important;
        transform: rotate(2deg) scale(0.95);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    /* Table styling to match screenshot */
    .table-bordered th, .table-bordered td {
        border: 1px solid #dee2e6;
        padding: 8px 12px;
        vertical-align: middle;
    }

    .table-bordered thead th {
        background-color: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
        font-weight: 600;
        color: #495057;
    }

    .table-hover tbody tr:hover {
        background-color: #f5f5f5;
    }

    /* Account details styling */
    .form-group label {
        color: #6c757d;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        margin-bottom: 4px;
    }

    .form-group div {
        color: #495057;
        font-weight: 500;
        font-size: 14px;
    }

    /* Enhanced Context Menu */
    .dropdown-menu {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        padding: 8px 0;
        min-width: 200px;
    }

    .dropdown-header {
        font-size: 12px;
        font-weight: 600;
        color: #6c757d;
        padding: 8px 16px 4px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .dropdown-item {
        padding: 8px 16px;
        font-size: 13px;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        text-decoration: none;
        color: #495057;
    }

        .dropdown-item i {
            margin-right: 8px;
            width: 16px;
            text-align: center;
        }

        .dropdown-item:hover {
            background-color: #f8f9fa;
            color: #495057;
            text-decoration: none;
        }

        .dropdown-item.text-danger:hover {
            background-color: #f8d7da;
            color: #721c24;
        }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .container-fluid .row .col-md-5, .container-fluid .row .col-md-7

    {
        margin-bottom: 20px;
    }

    #tree-container {
        height: 400px !important;
    }

    .btn-group .btn {
        margin-bottom: 5px;
    }

    .modal-dialog {
        margin: 10px;
    }

    .account-type-label {
        font-size: 14px;
    }

    }

    /* Custom scrollbar for tree container */
    #tree-container::-webkit-scrollbar {
        width: 8px;
    }

    #tree-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    #tree-container::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }

        #tree-container::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

    /* Loading spinner */
    .spinner-border {
        width: 2rem;
        height: 2rem;
    }

    /* Badges */
    .badge {
        font-size: 0.75em;
        padding: 4px 8px;
        border-radius: 4px;
    }

    .badge-sm {
        font-size: 0.7em;
        padding: 3px 6px;
    }

    /* Animations */
    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .card {
        animation: fadeIn 0.5s ease-out;
    }

    @@keyframes slideDown {
        from

    {
        opacity: 0;
        transform: translateY(-10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .dropdown-menu {
        animation: slideDown 0.2s ease-out;
    }

    @@keyframes pulseSelection {
        0%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    100% {
        transform: scale(1);
    }

    }

    /* Table Styles */
    .table {
        margin-bottom: 0;
    }

        .table th {
            background-color: #f8f9fa;
            border-top: none;
            font-weight: 600;
            color: #495057;
            padding: 12px 8px;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .table td {
            padding: 10px 8px;
            vertical-align: middle;
        }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .table-active {
        background-color: rgba(0, 123, 255, 0.1) !important;
    }

    .table-sm th,
    .table-sm td {
        padding: 8px;
    }

    .table-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #dee2e6;
    }

        .table-header h6 {
            margin: 0;
            color: #495057;
            font-weight: 600;
        }

    .table-footer {
        margin-top: 15px;
        padding-top: 10px;
        border-top: 1px solid #dee2e6;
    }

    .table-responsive {
        max-height: 400px;
        overflow-y: auto;
    }
</style>

<!-- Include Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<script>
    // CORRECTED: Enhanced Global Table Data with Proper Structure
    window.tableData = [];

    // CORRECTED: Enhanced table rendering function with proper empty state handling
    window.renderTable = function() {
        const container = document.getElementById('account-table-container');
        if (!container) {
            console.warn('Table container not found');
            return;
        }

        // Use actual data if available, otherwise show empty state
        const data = window.tableData && window.tableData.length > 0 ? window.tableData : [];

        console.log('Rendering table with', data.length, 'items');

        if (data.length === 0) {
            // Show empty state
            container.innerHTML = `
                <div class="table-header">
                    <h6><i class="fas fa-table"></i> Ledger Transactions</h6>
                    <small class="text-muted">No transactions found</small>
                </div>
                <div class="text-center py-4">
                    <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                    <h6 class="text-muted">No Ledger Transactions</h6>
                    <p class="text-muted">This account has no transaction data available.</p>
                </div>
            `;
            return;
        }

        let html = `
            <div class="table-header">
                <h6><i class="fas fa-table"></i> Ledger Transactions</h6>
                <small class="text-muted">${data.length} transaction(s) • Drag rows to tree to create accounts</small>
            </div>
            <div class="table-responsive">
                <table class="table table-sm table-hover table-bordered">
                    <thead class="thead-light">
                        <tr>
                            <th style="width: 50px;">SL. No</th>
                            <th>Company</th>
                            <th>Ledger Code</th>
                            <th>Ledger Name</th>
                            <th>Ledger Group</th>
                            <th style="text-align: right;">Opening Balance</th>
                            <th style="text-align: right;">Debit</th>
                            <th style="text-align: right;">Credit</th>
                            <th style="text-align: right;">Closing Balance</th>
                            <th style="width: 100px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        data.forEach((item, index) => {
            const typeColor = getTypeColor(item.LedgerGroup);
            const typeIcon = getTypeIcon(item.LedgerGroup);
            html += `
                <tr draggable="true"
                    ondragstart="handleTableDragStart(event, ${JSON.stringify(item).replace(/"/g, '&quot;')})"
                    ondragend="handleTableDragEnd(event)"
                    data-item-id="${item.GroupID}"
                    class="draggable-row"
                    title="Drag this item to the tree to create an account">
                    <td><strong class="text-primary">${index + 1}</strong></td>
                    <td>
                        <i class="fas fa-building mr-1 text-muted"></i>
                        ${item.Company || 'Main Company'}
                    </td>
                    <td><strong class="text-info">${item.LedgerCode}</strong></td>
                    <td>
                        <i class="fas fa-grip-vertical drag-handle text-muted mr-2" title="Drag handle"></i>
                        <i class="fas ${typeIcon} mr-1 text-${typeColor}"></i>
                        ${item.LedgerName}
                    </td>
                    <td>
                        <span class="badge badge-${typeColor} badge-sm">
                            ${item.LedgerGroup}
                        </span>
                    </td>
                    <td class="text-right">${formatTableNumber(item.OpeningBalance)}</td>
                    <td class="text-right text-success">${formatTableNumber(item.Debit)}</td>
                    <td class="text-right text-danger">${formatTableNumber(item.Credit)}</td>
                    <td class="text-right font-weight-bold ${item.ClosingBalance >= 0 ? 'text-success' : 'text-danger'}">${formatTableNumber(item.ClosingBalance)}</td>
                    <td class="text-center">
                        <small class="text-muted">
                            <i class="fas fa-arrows-alt"></i> Drag
                        </small>
                    </td>
                </tr>
            `;
        });

        html += `
                    </tbody>
                    <tfoot class="thead-light">
                        <tr>
                            <th colspan="5" class="text-right">Totals:</th>
                            <th class="text-right">${formatTableNumber(getTotalOpening(data))}</th>
                            <th class="text-right text-success">${formatTableNumber(getTotalDebit(data))}</th>
                            <th class="text-right text-danger">${formatTableNumber(getTotalCredit(data))}</th>
                            <th class="text-right font-weight-bold">${formatTableNumber(getTotalClosing(data))}</th>
                            <th class="text-center">${data.length} items</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <div class="table-footer">
                <div class="row">
                    <div class="col-md-12 text-right">
                        <small class="text-muted">
                            <i class="fas fa-info-circle"></i>
                            Drag any row to the tree structure to create accounts under the selected group
                        </small>
                    </div>
                </div>
            </div>
        `;

        container.innerHTML = html;
    };

    // Calculate totals
    function getTotalOpening(data) {
        return data.reduce((sum, item) => sum + (parseFloat(item.OpeningBalance) || 0), 0);
    }

    function getTotalDebit(data) {
        return data.reduce((sum, item) => sum + (parseFloat(item.Debit) || 0), 0);
    }

    function getTotalCredit(data) {
        return data.reduce((sum, item) => sum + (parseFloat(item.Credit) || 0), 0);
    }

    function getTotalClosing(data) {
        return data.reduce((sum, item) => sum + (parseFloat(item.ClosingBalance) || 0), 0);
    }

    // Format numbers for table display
    function formatTableNumber(num) {
        if (num === 0) return '0.00';
        if (!num) return '0.00';

        const numValue = parseFloat(num);
        const formatted = Math.abs(numValue).toLocaleString('en-US', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });

        return numValue < 0 ? `(${formatted})` : formatted;
    }

    // Get badge color based on account group
    function getTypeColor(ledgerGroup) {
        if (!ledgerGroup) return 'secondary';

        const group = ledgerGroup.toLowerCase();
        if (group.includes('asset')) return 'primary';
        if (group.includes('liability')) return 'warning';
        if (group.includes('equity')) return 'info';
        if (group.includes('revenue') || group.includes('income')) return 'success';
        if (group.includes('expense')) return 'danger';

        return 'secondary';
    }

    // Get icon based on account group
    function getTypeIcon(ledgerGroup) {
        if (!ledgerGroup) return 'fa-circle';

        const group = ledgerGroup.toLowerCase();
        if (group.includes('asset')) return 'fa-coins';
        if (group.includes('liability')) return 'fa-credit-card';
        if (group.includes('equity')) return 'fa-balance-scale';
        if (group.includes('revenue') || group.includes('income')) return 'fa-chart-line';
        if (group.includes('expense')) return 'fa-receipt';

        return 'fa-circle';
    }

    // Format number function
    window.formatNumber = function(num) {
        if (!num) return '0';
        return new Intl.NumberFormat().format(num);
    };

    // Global functions for tree interaction
    window.selectNode = function(nodeId) {
        const scope = angular.element(document.querySelector('[ng-controller="ChartOfAccountController"]')).scope();
        const node = scope.findNodeInTree(scope.accounts, nodeId);
        if (node) {
            scope.$apply(() => {
                scope.selectLedgerNode(node);
            });
        }
    };

    window.showContextMenu = function(event, nodeId) {
        const scope = angular.element(document.querySelector('[ng-controller="ChartOfAccountController"]')).scope();
        const node = scope.findNodeInTree(scope.accounts, nodeId);
        if (node) {
            scope.$apply(() => {
                scope.showContextMenu(event, node);
            });
        }
    };

    window.toggleExpansion = function(nodeId) {
        const scope = angular.element(document.querySelector('[ng-controller="ChartOfAccountController"]')).scope();

        function toggleInTree(tree) {
            for (let node of tree) {
                if (node.id === nodeId) {
                    node.expanded = !node.expanded;
                    return true;
                }
                if (node.children && toggleInTree(node.children)) {
                    return true;
                }
            }
            return false;
        }

        if (toggleInTree(scope.accounts)) {
            scope.renderBasicTree();
            scope.$apply();
        }
    };

    // Tree drag and drop handlers
    window.handleTreeDragStart = function(e, nodeId) {
        const scope = angular.element(document.querySelector('[ng-controller="ChartOfAccountController"]')).scope();
        const node = scope.findNodeInTree(scope.accounts, nodeId);

        if (node) {
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/plain', JSON.stringify({...node, dragType: 'tree'}));
            e.target.style.opacity = '0.6';
            e.target.classList.add('dragging');

            // Add visual feedback for tree dragging
            document.body.classList.add('dragging-tree-item');
            console.log('Started dragging tree node:', node.AccountName || node.AccountGroupName);
        }
    };

    window.handleTreeDragEnd = function(e) {
        e.target.style.opacity = '1';
        e.target.classList.remove('dragging');
        document.body.classList.remove('dragging-tree-item');

        // Clear all drop indicators
        document.querySelectorAll('.drop-target').forEach(el => {
            el.classList.remove('drop-target');
        });
    };

    window.handleDragEnter = function(e, targetId) {
        e.preventDefault();
        e.target.classList.add('drop-target');
    };

    window.handleDragLeave = function(e) {
        e.target.classList.remove('drop-target');
    };

    // Drag and drop handlers
    window.handleDragOver = function(e) {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';
    };

    window.handleDropEvent = function(e, targetId) {
        e.preventDefault();
        e.target.classList.remove('drop-target');

        try {
            const draggedData = JSON.parse(e.dataTransfer.getData('text/plain'));
            const scope = angular.element(document.querySelector('[ng-controller="ChartOfAccountController"]')).scope();

            if (draggedData.dragType === 'tree') {
                // Handle tree node dragging
                console.log('Dropping tree node:', draggedData.AccountName || draggedData.AccountGroupName, 'onto:', targetId);
                scope.handleTreeNodeMove(draggedData, targetId);
            } else {
                // Handle table item dragging
                console.log('Dropping table item:', draggedData.LedgerName, 'onto:', targetId);
                scope.handleTableItemDrop(targetId, draggedData);
            }
        } catch (error) {
            console.error('Error handling drop:', error);
        }
    };

    window.handleTableDragStart = function(e, item) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', JSON.stringify(item));
        e.target.style.opacity = '0.6';
        e.target.classList.add('dragging');
        document.body.classList.add('dragging-table-item');
        console.log('Started dragging table item:', item.LedgerName);
    };

    window.handleTableDragEnd = function(e) {
        e.target.style.opacity = '1';
        e.target.classList.remove('dragging');
        document.body.classList.remove('dragging-table-item');
    };

    // CORRECTED: Initialize table properly - no default demo data
    $(document).ready(function() {
        // Initialize with empty table first
        setTimeout(() => {
            // Only set empty data initially
            window.tableData = [];
            renderTable();
        }, 1000);
    });

    // CORRECTED: Modal event handlers to fix close/cancel issues
    $(document).on('click', '[data-dismiss="modal"]', function() {
        const scope = angular.element(document.querySelector('[ng-controller="ChartOfAccountController"]')).scope();
        if (scope) {
            scope.$apply(() => {
                scope.closeModal();
            });
        }
        $('#ledgerModal').modal('hide');
    });

    $(document).on('hidden.bs.modal', '#ledgerModal', function() {
        const scope = angular.element(document.querySelector('[ng-controller="ChartOfAccountController"]')).scope();
        if (scope) {
            scope.$apply(() => {
                scope.resetFormData();
            });
        }
    });

    // Enhanced keyboard shortcuts
    $(document).on('keydown', function(e) {
        // ESC key to close modal
        if (e.keyCode === 27) {
            const scope = angular.element(document.querySelector('[ng-controller="ChartOfAccountController"]')).scope();
            if ($('#ledgerModal').hasClass('show')) {
                scope.$apply(() => {
                    scope.closeModal();
                });
                $('#ledgerModal').modal('hide');
            }
        }
    });
</script>