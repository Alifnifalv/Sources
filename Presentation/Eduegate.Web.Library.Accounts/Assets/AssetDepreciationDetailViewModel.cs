using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Eduegate.Framework.Mvc.Attributes;
using Eduegate.Web.Library.Common;
using Eduegate.Web.Library.ViewModels;

namespace Eduegate.Web.Library.Accounts.Assets
{
    [ContainerType(Framework.Enums.ContainerTypes.Tab, "", "CRUDModel.Model.DetailViewModel")]
    [Pagination(20, "default")]
    public class AssetDepreciationDetailViewModel : BaseMasterViewModel
    {
        public AssetDepreciationDetailViewModel()
        {
            IsSerialNumberOnAssetEntry = false;
            IsShowDynamicPopup = false;
            TransactionSerialMaps = new List<AssetDepreciationDetailSerialMapViewModel>() { new AssetDepreciationDetailSerialMapViewModel() };
        }

        public long TransactionDetailIID { get; set; }

        public long? TransactionHeadID { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Label, "small-col-width")]
        [CustomDisplay("Sr.No")]
        public long SerialNo { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Label)]
        [CustomDisplay("AssetCategory")]
        public string AssetCategory { get; set; }
        public long? AssetCategoryID { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Label)]
        [CustomDisplay("AssetCode")]
        public string AssetCode { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Label)]
        [CustomDisplay("AssetDescription")]
        public string AssetDescription { get; set; }
        public long? AssetID { get; set; }

        //[Required]
        //[ControlType(Framework.Enums.ControlTypes.Label, "small-col-width")]
        //[CustomDisplay("Sequence Code")]
        //public string AssetSequenceCode { get; set; }
        //public long? AssetSerialMapID { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Label)]
        [CustomDisplay("Number of Days in the Accounting Period")]
        public int? AccountingPeriodDays { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Label)]
        [CustomDisplay("Dep. Accumulated Till Date")]
        public string AccumulatedTillDateString { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Label)]
        [CustomDisplay("Dep From")]
        public string DepFromDateString { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.DatePicker, attribs: "ng-disabled=true")]
        [CustomDisplay("Dep Till Date")]
        public string DepToDateString { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.TextBox, attribs: "ng-disabled=true")]
        [CustomDisplay("Dep for the above period")]
        public decimal? DepAbovePeriod { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.TextBox, attribs: "ng-disabled=true")]
        [CustomDisplay("Dep Booked")]
        public decimal? BookedDepreciation { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.TextBox, attribs: "ng-disabled=true")]
        [CustomDisplay("Dep Provided till date")]
        public decimal? AccumulatedDepreciationAmount { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.TextBox, attribs: "ng-disabled=true")]
        [CustomDisplay("Net Value")]
        public decimal? NetValue { get; set; }


        [ControlType(Framework.Enums.ControlTypes.Label)]
        [CustomDisplay("SerialQuantity")]
        public decimal? Quantity { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.IconButton, "", "ng-click='BringAssetSerialPopup(detail)'", Attributes2 = "colspan=11")]
        [DisplayName("Serials")]
        public List<AssetDepreciationDetailSerialMapViewModel> TransactionSerialMaps { get; set; }

        public decimal? NetAmount { get; set; }

        public decimal? Amount { get; set; }

        public bool IsShowDynamicPopup { get; set; }

        public bool? IsSerialNumberOnAssetEntry { get; set; }
        public bool? IsSerailNumberAutoGenerated { get; set; }

        public bool? IsRequiredSerialNumber { get; set; }

        public long? AccountID { get; set; }
        public long? AssetGlAccID { get; set; }
        public long? AccumulatedDepGLAccID { get; set; }
        public long? DepreciationExpGLAccID { get; set; }

        public decimal? PreviousAcculatedDepreciationAmount { get; set; }


        //[ControlType(Framework.Enums.ControlTypes.Button, "x-small-col-width", "ng-click='InsertGridRow($index, ModelStructure.Model.DetailViewModel[0], CRUDModel.Model.DetailViewModel)'")]
        //[DisplayName("+")]
        //public string Add { get; set; }

        //[ControlType(Framework.Enums.ControlTypes.Button, "x-small-col-width", "ng-click='RemoveGridRow($index, CRUDModel.Model.DetailViewModel[0], CRUDModel.Model.DetailViewModel)'")]
        //[DisplayName("-")]
        //public string Remove { get; set; }
    }
}