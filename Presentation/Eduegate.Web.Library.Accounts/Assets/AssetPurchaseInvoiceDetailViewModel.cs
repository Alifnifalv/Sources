using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Eduegate.Framework.Mvc.Attributes;
using Eduegate.Web.Library.Common;
using Eduegate.Web.Library.ViewModels;

namespace Eduegate.Web.Library.Accounts.Assets
{
    [ContainerType(Framework.Enums.ContainerTypes.Tab, "", "CRUDModel.Model.DetailViewModel")]
    public class AssetPurchaseInvoiceDetailViewModel : BaseMasterViewModel
    {
        public AssetPurchaseInvoiceDetailViewModel()
        {
            IsSerialNumberOnAssetEntry = true;
            TransactionSerialMaps = new List<AssetPurchaseInvoiceSerialMapViewModel>() { new AssetPurchaseInvoiceSerialMapViewModel() };
            IsRequiredSerialNumber = false;
            IsShowDynamicPopup = false;
            Quantity = null;
        }

        public long TransactionDetailID { get; set; }

        public long TransactionHead { get; set; }      

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Label, "small-col-width")]
        [DisplayName("Sr.No")]
        public decimal? SLNo { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Select2, "large-col-width detailview-grid")]
        [Select2("SKUID", "String", false)]
        [CustomDisplay("Product")]
        [LazyLoad("", "Mutual/GetDynamicLookUpData?lookType=AssetProducts", "LookUps.AssetProducts")]
        public KeyValueViewModel SKUID { get; set; }

        [ControlType(Framework.Enums.ControlTypes.Label, "ex-large-col-width")]
        [CustomDisplay("Description")]
        public string Description { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Button, "", "ng-click='FillAssetButton(detail, CRUDModel.Model.MasterViewModel)'")]
        [DisplayName("FillAsset")]
        public string FillAssetButton { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.Select2, "large-col-width detailview-grid")]
        [Select2("Asset", "String", false, "AssetChanges(detail, CRUDModel.Model.MasterViewModel)")]
        [CustomDisplay("Asset")]
        [LookUp("LookUps.Assets")]
        public KeyValueViewModel Asset { get; set; }
        public long? AssetID { get; set; }

        [ControlType(Framework.Enums.ControlTypes.Label, "ex-large-col-width")]
        [CustomDisplay("AssetDescription")]
        public string AssetDescription { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.TextBox, "medium-col-width textright", Attributes2 = "QuantityChanges(ModelStructure.DetailViewModel, detail)")]
        [CustomDisplay("Quantity")]
        public decimal? Quantity { get; set; }

        [Required]
        [ControlType(Framework.Enums.ControlTypes.IconButton, "", "ng-click='BringAssetSerialPopup(detail, CRUDModel.Model.MasterViewModel)'")]
        [CustomDisplay("Serials")]
        public List<AssetPurchaseInvoiceSerialMapViewModel> TransactionSerialMaps { get; set; }

        public decimal? Amount { get; set; }        

        public bool IsShowDynamicPopup { get; set; }

        public bool? IsSerialNumberOnAssetEntry { get; set; }
        public bool? IsSerailNumberAutoGenerated { get; set; }

        public bool? IsRequiredSerialNumber { get; set; }
        public string AssetPrefix { get; set; }
        public long? AssetLastSequenceNumber { get; set; }
        public string AssetCategoryName { get; set; }
        public long? AssetCategoryID { get; set; }
        public decimal? AssetCategoryDepreciationRate { get; set; }

        public long? AccountID { get; set; }
        public long? AssetGlAccID { get; set; }
        public long? AccumulatedDepGLAccID { get; set; }
        public long? DepreciationExpGLAccID { get; set; }


        [ControlType(Framework.Enums.ControlTypes.Button, "x-small-col-width", "ng-click='RemoveGridRow($index, CRUDModel.Model.DetailViewModel[0], CRUDModel.Model.DetailViewModel)'")]
        [DisplayName("-")]
        public string Remove { get; set; }
    }
}