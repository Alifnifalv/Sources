using System;
using System.Collections.Generic;
using System.Linq;
using Eduegate.Framework.Contracts.Common;
using Eduegate.Services.Contracts.Catalog;
using Eduegate.Web.Library.ViewModels.Common;

namespace Eduegate.Web.Library.ViewModels
{
    public partial class ProductInventoryConfigViewModel : BaseMasterViewModel
    {
        public ProductInventoryConfigViewModel()
        {
            Tags = new List<KeyValueViewModel>();
        }
        public long ProductInventoryConfigID { get; set; }
        public Nullable<decimal> NotifyQuantity { get; set; }
        public Nullable<decimal> MinimumQuantity { get; set; }
        public Nullable<decimal> MaximumQuantity { get; set; }
        public Nullable<decimal> MinimumQuanityInCart { get; set; }
        public Nullable<decimal> MaximumQuantityInCart { get; set; }
        public Nullable<bool> IsQuntityUseDecimals { get; set; }
        public Nullable<byte> BackOrderTypeID { get; set; }
        public Nullable<byte> IsStockAvailabiltiyID { get; set; }
        public string ProductWarranty { get; set; }
        public Nullable<bool> IsSerialNumber { get; set; }
        public Nullable<bool> IsSerialNumberRequiredForPurchase { get; set; }
        public Nullable<short> DeliveryMethod { get; set; }
        
        public Nullable<decimal> ProductWeight { get; set; }
        public Nullable<decimal> ProductLength { get; set; }
        public Nullable<decimal> ProductWidth { get; set; }
        public Nullable<decimal> ProductHeight { get; set; }
        public Nullable<decimal> DimensionalWeight { get; set; }
        public Nullable<long>PackingTypeID{ get; set; }
        public Nullable<bool> IsMarketPlace { get; set; }
        public string HSCode { get; set; }
        
        //TODO: Need to check if this is required
        //[AllowHtml]
        public MultiLanguageText Description { get; set; }

        //TODO: Need to check if this is required
        //[AllowHtml]
        public MultiLanguageText Details { get; set; }

        public bool IsHiddenFromList { get; set; }
        public bool HideSKU { get; set; }
        public List<ProductDeliveryCountrySettingViewModel> AllowShippingfor { get; set; }
        public Nullable<bool> IsNonRefundable { get; set; }
        public string GroupingKey { get; set; }
        public Nullable<bool> IsSerailNumberAutoGenerated { get; set; }
        public Nullable<int> MaxQuantityInCartForVerifiedCustomer { get; set; }
        public Nullable<int> MaxQuantityInCartForNonVerifiedCustomer { get; set; }
        public Nullable<int> MaxQuantityDuration { get; set; }
        public List<KeyValueViewModel> Tags { get; set; }

        public List<CultureDataInfoViewModel> SupportedCultures { get; set; }
        public List<ProductInventoryConfigCultureDTO> ProductInventoryClutureDTO { get; set; }
        public Nullable<long> EmployeeID { get; set; }
        public KeyValueViewModel SKUOwner { get; set; }  

        public static ProductInventoryConfigDTO ToDto(ProductInventoryConfigViewModel vm, SKUViewModel sku = null, List<CultureDataInfoViewModel> cultures = null) 
        {
            if (vm != null)
            {
                var picDTO = new ProductInventoryConfigDTO();
                picDTO.AllowShippingfor = new List<ProductDeliveryCountrySettingDTO>();

                picDTO.ProductInventoryConfigID = vm.ProductInventoryConfigID;
                picDTO.NotifyQuantity = vm.NotifyQuantity;
                picDTO.MinimumQuantity = vm.MinimumQuantity;
                picDTO.MaximumQuantity = vm.MaximumQuantity;
                picDTO.MinimumQuanityInCart = vm.MinimumQuanityInCart;
                picDTO.MaximumQuantityInCart = vm.MaximumQuantityInCart;
                picDTO.IsQuntityUseDecimals = vm.IsQuntityUseDecimals;
                picDTO.BackOrderTypeID = vm.BackOrderTypeID;
                picDTO.IsStockAvailabiltiyID = vm.IsStockAvailabiltiyID;
                picDTO.ProductWarranty = vm.ProductWarranty;
                picDTO.IsSerialNumber = vm.IsSerialNumber;
                picDTO.IsSerialNumberRequiredForPurchase = vm.IsSerialNumberRequiredForPurchase;
                picDTO.DeliveryMethod = vm.DeliveryMethod;
                picDTO.ProductWeight = vm.ProductWeight;
                picDTO.ProductLength = vm.ProductLength;
                picDTO.ProductWidth = vm.ProductWidth;
                picDTO.ProductHeight = vm.ProductHeight;
                picDTO.DimensionalWeight = vm.DimensionalWeight;
                picDTO.PackingTypeID=vm.PackingTypeID;
                picDTO.IsMarketPlace=vm.IsMarketPlace;
                picDTO.HSCode =vm.HSCode;
                picDTO.Description = vm.Description !=null?vm.Description.Text: null;
                picDTO.Details = vm.Details!=null? vm.Details.Text:null;
                picDTO.IsHiddenFromList = vm.IsHiddenFromList;
                picDTO.HideSKU = vm.HideSKU;
                picDTO.IsNonRefundable = vm.IsNonRefundable;
                picDTO.GroupingKey = vm.GroupingKey;
                picDTO.IsSerailNumberAutoGenerated = vm.IsSerailNumberAutoGenerated;
                picDTO.MaxQuantityInCartForVerifiedCustomer = vm.MaxQuantityInCartForVerifiedCustomer;
                picDTO.MaxQuantityInCartForNonVerifiedCustomer = vm.MaxQuantityInCartForNonVerifiedCustomer;
                picDTO.MaxQuantityDuration = vm.MaxQuantityDuration;
                picDTO.CreatedBy = vm.CreatedBy;
                picDTO.UpdatedBy = vm.UpdatedBy;
                picDTO.CreatedDate = vm.CreatedDate;
                picDTO.UpdatedDate = DateTime.Now;
                picDTO.TimeStamps = vm.TimeStamps;
                picDTO.EmployeeID = vm.EmployeeID.HasValue ? (long)vm.EmployeeID.Value : default(long);
                picDTO.ProductInventoryConfigCulture = ProductInventoryConfigViewModel.ToCultureDTO(vm, cultures);
                if (vm.AllowShippingfor != null && vm.AllowShippingfor.Count > 0)
                {
                    foreach(var dsVM in vm.AllowShippingfor){
                        picDTO.AllowShippingfor.Add(ProductDeliveryCountrySettingViewModel.ToDTO(dsVM, sku));
                    }
                }

                if (vm.Tags != null && vm.Tags.Count > 0)
                {
                    picDTO.Tags = new List<KeyValueDTO>();

                    foreach (var tag in vm.Tags)
                    {
                        picDTO.Tags.Add(KeyValueViewModel.ToDTO(tag));
                    }
                }

                return picDTO;
            }

            else return new ProductInventoryConfigDTO();
        }

        public static List<ProductInventoryConfigCultureDTO> ToCultureDTO(ProductInventoryConfigViewModel vm, List<CultureDataInfoViewModel> cultures)
        {
            var dtos = new List<ProductInventoryConfigCultureDTO>();
            bool isFrist = true;

            foreach (var culture in cultures)
            {
                //Assume that first one is the default culture which will be there by default.
                if (isFrist)
                {
                    isFrist = false;
                    continue;
                }

                dtos.Add(new ProductInventoryConfigCultureDTO()
                {
                    CultureID = culture.CultureID,
                    ProductInventoryConfigID = vm.ProductInventoryConfigID,
                    Description =vm.Description!=null? vm.Description.GetValueByCultureID(culture.CultureID):null,
                    Details = vm.Details!=null? vm.Details.GetValueByCultureID(culture.CultureID):null,
                   // TimeStamps = vm.Details.GetTimeStampByCultureID(culture.CultureID),
                });
            }

            return dtos;
        }


        public static ProductInventoryConfigViewModel ToViewModel(ProductInventoryConfigDTO dto, List<CultureDataInfoDTO> cultures)
        {
            if (dto != null)
            {
                var cultureVm = CultureDataInfoViewModel.FromDTO(cultures);
                var picVM = new ProductInventoryConfigViewModel()
                {
                    Description = new MultiLanguageText() { Text = dto.Description, CultureDatas = CultureDataInfoViewModel.FromDTO(cultures) },
                    Details = new MultiLanguageText() { Text = dto.Details, CultureDatas = CultureDataInfoViewModel.FromDTO(cultures) }
                };
                                                                  
                picVM.AllowShippingfor = new List<ProductDeliveryCountrySettingViewModel>();

                picVM.ProductInventoryConfigID = dto.ProductInventoryConfigID;
                picVM.NotifyQuantity = dto.NotifyQuantity;
                picVM.MinimumQuantity = dto.MinimumQuantity;
                picVM.MaximumQuantity = dto.MaximumQuantity;
                picVM.MinimumQuanityInCart = dto.MinimumQuanityInCart;
                picVM.MaximumQuantityInCart = dto.MaximumQuantityInCart;
                picVM.IsQuntityUseDecimals = dto.IsQuntityUseDecimals;
                picVM.BackOrderTypeID = dto.BackOrderTypeID;
                picVM.IsStockAvailabiltiyID = dto.IsStockAvailabiltiyID;
                picVM.ProductWarranty = dto.ProductWarranty;
                picVM.IsSerialNumber = dto.IsSerialNumber;
                picVM.IsSerialNumberRequiredForPurchase = dto.IsSerialNumberRequiredForPurchase;
                picVM.DeliveryMethod = dto.DeliveryMethod;
                picVM.ProductWeight = dto.ProductWeight;
                picVM.ProductLength = dto.ProductLength;
                picVM.ProductWidth = dto.ProductWidth;
                picVM.ProductHeight = dto.ProductHeight;
                picVM.DimensionalWeight = dto.DimensionalWeight;
                picVM.PackingTypeID =dto.PackingTypeID;
                picVM.IsMarketPlace=dto.IsMarketPlace;
                picVM.HSCode=dto.HSCode;
                picVM.Description.Text=dto.Description;
                picVM.Details.Text = dto.Details;
                picVM.IsHiddenFromList = dto.IsHiddenFromList;
                picVM.HideSKU = dto.HideSKU;
                picVM.IsNonRefundable = dto.IsNonRefundable;
                picVM.GroupingKey = dto.GroupingKey;
                picVM.IsSerailNumberAutoGenerated = dto.IsSerailNumberAutoGenerated;
                picVM.MaxQuantityInCartForVerifiedCustomer = dto.MaxQuantityInCartForVerifiedCustomer;
                picVM.MaxQuantityInCartForNonVerifiedCustomer = dto.MaxQuantityInCartForNonVerifiedCustomer;
                picVM.MaxQuantityDuration = dto.MaxQuantityDuration;
                picVM.CreatedBy = dto.CreatedBy;
                picVM.UpdatedBy = dto.UpdatedBy;
                picVM.CreatedDate = dto.CreatedDate;
                picVM.UpdatedDate = DateTime.Now;
                picVM.TimeStamps = dto.TimeStamps;
                picVM.EmployeeID = dto.EmployeeID.HasValue ? (long)dto.EmployeeID.Value : default(long);
                picVM.SKUOwner = new KeyValueViewModel();
                picVM.SKUOwner.Key = dto.EmployeeID.ToString();
                picVM.SKUOwner.Value = dto.EmployeeName; 

                if (cultures != null)
                {
                    bool isFirst = true;
                    foreach (var culture in cultureVm)
                    {
                        var cultureDTO = dto.ProductInventoryConfigCulture.FirstOrDefault(a => a.CultureID == culture.CultureID);

                        if (isFirst && cultureDTO == null)
                        {
                            cultureDTO = new ProductInventoryConfigCultureDTO()
                            {
                                CultureID = culture.CultureID,
                                ProductInventoryConfigID = dto.ProductInventoryConfigID,
                                Description = dto.Description,
                                Details = dto.Details,

                            };
                            isFirst = false;
                            continue;
                        }
                        picVM.Description.SetValueByCultureID(culture, cultureDTO == null ? string.Empty : cultureDTO.Description, cultureDTO == null ? null : cultureDTO.TimeStamps);
                        picVM.Details.SetValueByCultureID(culture, cultureDTO == null ? string.Empty : cultureDTO.Details, cultureDTO == null ? null : cultureDTO.TimeStamps);
                    }
                }

                if (dto.AllowShippingfor != null && dto.AllowShippingfor.Count > 0)
                {
                    foreach (var dsDTO in dto.AllowShippingfor)
                    {
                        picVM.AllowShippingfor.Add(ProductDeliveryCountrySettingViewModel.ToViewModel(dsDTO));
                    }
                 }

                if (dto.Tags != null && dto.Tags.Count > 0)
                {
                    foreach (var tag in dto.Tags)
                    {
                        picVM.Tags.Add(KeyValueViewModel.ToViewModel(tag));
                    }
                }

                return picVM;
            }
            else return new ProductInventoryConfigViewModel();
        }
    }
}
