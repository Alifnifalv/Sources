using System;
using System.Collections.Generic;
using Eduegate.Framework;
using Eduegate.Framework.Enums;
using Eduegate.Services.Contracts;
using Eduegate.Services.Contracts.Catalog;
using Eduegate.Framework.Contracts.Common;
using Eduegate.Services.Contracts.Mutual;
using Eduegate.Services;
using Eduegate.Services.Contracts.Accounts.Accounting;
using Eduegate.Services.Contracts.Jobs;

namespace Eduegate.Service.Client.Direct
{
    public class AccountingTransactionServiceClient : BaseClient, IAccountingTransaction
    {
        AccountingTransaction service = new AccountingTransaction();

        public AccountingTransactionServiceClient(CallContext callContext = null, Action<string> logger = null)
            : base(callContext, logger)
        {
            service.CallContext = callContext;
        }

        public CustomerAccountMapsDTO GetCustomerAccountMap(long CustomerID, int EntitlementID)
        {
            return service.GetCustomerAccountMap(CustomerID, EntitlementID);
        }

        public SupplierAccountEntitlmentMapsDTO GetSupplierAccountMap(long SupplierID, int EntitlementID)
        {
            return service.GetSupplierAccountMap(SupplierID, EntitlementID);
        }

        public List<ProductInventoryDTO> GetProductInventory(long skuID)
        {
            return service.GetProductInventory(skuID);
        }

        public bool AddAccountTransactions(List<AccountTransactionsDTO> dto)
        {
            return service.AddAccountTransactions(dto);
        }

        public VoucherMasterDTO GetVoucher(long TransactionHeadID)
        {
            return service.GetVoucher(TransactionHeadID);
        }

        public bool UpdateAccountTransactionProcessStatus(TransactionHeadDTO dto)
        {
            return service.UpdateAccountTransactionProcessStatus(dto);
        }

        public List<InvetoryTransactionDTO> GetInvetoryTransactionsByTransactionHeadID(long TransactionHeadID)
        {
            return service.GetInvetoryTransactionsByTransactionHeadID(TransactionHeadID);
        }
        public List<AccountDTO> GetAutoGeneratedAccounts(long AccountID, int noOfChildAccounts, string Entity, string Entitlment)
        {
            return service.GetAutoGeneratedAccounts(AccountID, noOfChildAccounts, Entity, Entitlment);
        }

        public List<EntitlementMapDTO> GetEntitlementsByHeadId(long headId)
        {
            return service.GetEntitlementsByHeadId(headId);
        }
        public AccountTransactionHeadDTO SaveAccountTransactionHead(AccountTransactionHeadDTO dto)
        {
            return service.SaveAccountTransactionHead(dto);
        }

        public AccountTransactionHeadDTO GetAccountTransactionHeadById(long HeadID)
        {
            return service.GetAccountTransactionHeadById(HeadID);
        }
        public List<KeyValueDTO> GetCustomerPendingInvoices(long accountID, long? branchID)
        {
            return service.GetCustomerPendingInvoices(accountID, branchID);
        }
        public string AdditionalExpensesTransactionsMap(List<AdditionalExpensesTransactionsMapDTO> additionalExpenseData, long accountTransactionHeadIID, long referenceID, short documentStatus)
        {
            return service.AdditionalExpensesTransactionsMap(additionalExpenseData, accountTransactionHeadIID, referenceID, documentStatus);
        }
        public List<AdditionalExpensesTransactionsMapDTO> GetAdditionalExpensesTransactions(List<AdditionalExpensesTransactionsMapDTO> additionalExpenseData, long accountTransactionHeadIID, long referenceID)
        {
            return service.GetAdditionalExpensesTransactions(additionalExpenseData, accountTransactionHeadIID, referenceID);
        }
        public List<ReceivableDTO> GetReceivablesByAccountId(long AccountID, Eduegate.Services.Contracts.Enums.DocumentReferenceTypes docType)
        {
            return service.GetReceivablesByAccountId(AccountID, docType);
        }

        public bool AddReceivables(List<ReceivableDTO> dtos)
        {
            return service.AddReceivables(dtos);
        }

        public bool AddPayables(List<PayableDTO> dtos)
        {
            return service.AddPayables(dtos);
        }

        public List<PayableDTO> GetPayablesByAccountId(long AccountID, Eduegate.Services.Contracts.Enums.DocumentReferenceTypes docType)
        {
            return service.GetPayablesByAccountId(AccountID, docType);
        }

        public List<AccountTransactionHeadDTO> GetAccountTransactionHeads(DocumentReferenceTypes referenceTypes, Eduegate.Framework.Enums.TransactionStatus transactionStatus)
        {
            return service.GetAccountTransactionHeads(referenceTypes, transactionStatus);
        }

        public List<JobEntryHeadAccountingDTO> GetAllMissionJobEntryHeads(DocumentReferenceTypes referenceTypes, Eduegate.Framework.Enums.TransactionStatus transactionStatus)
        {
            return service.GetAllMissionJobEntryHeads(referenceTypes, transactionStatus);
        }

        public List<ProductSKUCostDTO> GetProductSKUMapByID(long ProductSKUMapIID)
        {
            return service.GetProductSKUMapByID(ProductSKUMapIID);
        }

        public List<KeyValueDTO> GetVendorCustomerAccounts(string searchText)
        {
            return service.GetVendorCustomerAccounts(searchText);
        }

        public List<KeyValueDTO> Get_AllSuppliers_Accounts(string searchText)
        {
            return service.Get_AllSuppliers_Accounts(searchText);
        }

        public List<KeyValueDTO> Get_AllCustomers_Accounts(string searchText)
        {
            return service.Get_AllCustomers_Accounts(searchText);
        }

        public List<KeyValueDTO> Get_AllDrivers_Accounts(string searchText)
        {
            return service.Get_AllDrivers_Accounts(searchText);
        }

        public List<KeyValueDTO> GetChildAccounts_ByParentAccountId(string searchText, long ParentAccountId)
        {
            return service.GetChildAccounts_ByParentAccountId(searchText, ParentAccountId);
        }

        public List<KeyValueDTO> GetGLAccounts(string searchText)
        {
            return service.GetGLAccounts(searchText);
        }

        public List<KeyValueDTO> GetPaymentModes()
        {
            return service.GetPaymentModes();
        }

        public List<ReceivableDTO> GetCustomerPendingInvoices(long customerID)
        {
            return service.GetCustomerPendingInvoices(customerID);
        }

        public List<PayableDTO> GetSupplierPendingInvoices(long suplierID)
        {
            return service.GetSupplierPendingInvoices(suplierID);
        }

        public AccountDTO GetGLAccountByCode(string code)
        {
            return service.GetGLAccountByCode(code);
        }

        public List<TransactionHeadEntitlementMapDTO> GetTransactionEntitlementByHeadId(long headId)
        {
            return service.GetTransactionEntitlementByHeadId(headId);
        }

        public bool DeleteAccountTransactions(List<long> ids)
        {
            return service.DeleteAccountTransactions(ids);
        }

        public List<ReceivableDTO> GetReceivables(List<long> receivableIds)
        {
            return service.GetReceivables(receivableIds);
        }

        public List<PayableDTO> GetPayables(List<long> payableIds)
        {
            return service.GetPayables(payableIds);
        }

        public List<ReceivableDTO> SaveReceivables(List<ReceivableDTO> receivables)
        {
            return service.SaveReceivables(receivables);
        }

        public List<PayableDTO> SavePayables(List<PayableDTO> payables)
        {
            return service.SavePayables(payables);
        }

        public bool ClearPostedData(long accountingHeadID)
        {
            return service.ClearPostedData(accountingHeadID);
        }

        public ReceivableDTO GetAllocatedReceivables(long receivableId)
        {
            return service.GetAllocatedReceivables(receivableId);
        }
    }
}
