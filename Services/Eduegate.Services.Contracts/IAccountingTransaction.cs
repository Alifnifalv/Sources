using System.Collections.Generic;
using Eduegate.Services.Contracts.Catalog;
using Eduegate.Framework.Contracts.Common;
using Eduegate.Services.Contracts.Mutual;
using Eduegate.Framework.Enums;
using Eduegate.Services.Contracts.Accounts.Accounting;
using Eduegate.Services.Contracts.Jobs;

namespace Eduegate.Services.Contracts
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the interface name "ITransactionEngine" in both code and config file together.
    public interface IAccountingTransaction
    {
        //List<TransactionHeadDTO> GetAllTransaction(DocumentReferenceTypes referenceTypes, Eduegate.Framework.Enums.TransactionStatus transactionStatus);

        CustomerAccountMapsDTO GetCustomerAccountMap(long CustomerID, int EntitlementID);

        SupplierAccountEntitlmentMapsDTO GetSupplierAccountMap(long SupplierID, int EntitlementID);

        List<ProductInventoryDTO> GetProductInventory(long skuID);

        bool AddAccountTransactions(List<AccountTransactionsDTO> dto);

        bool DeleteAccountTransactions(List<long> ids);

        VoucherMasterDTO GetVoucher(long TransactionHeadID);

        bool UpdateAccountTransactionProcessStatus(TransactionHeadDTO dto);

        List<InvetoryTransactionDTO> GetInvetoryTransactionsByTransactionHeadID(long TransactionHeadID);

        List<AccountDTO> GetAutoGeneratedAccounts(long AccountID, int noOfChildAccounts, string Entity, string Entitlment);

        List<EntitlementMapDTO> GetEntitlementsByHeadId(long headId);

        AccountTransactionHeadDTO SaveAccountTransactionHead(AccountTransactionHeadDTO dto);

        AccountTransactionHeadDTO GetAccountTransactionHeadById(long headId);

        List<KeyValueDTO> GetCustomerPendingInvoices(long accountID, long? branchID);

        string AdditionalExpensesTransactionsMap(List<AdditionalExpensesTransactionsMapDTO> additionalExpenseData, long accountTransactionHeadIID, long referenceID, short documentStatus);

        List<AdditionalExpensesTransactionsMapDTO> GetAdditionalExpensesTransactions(List<AdditionalExpensesTransactionsMapDTO> additionalExpenseData, long accountTransactionHeadIID, long referenceID);
       
        List<ReceivableDTO> GetReceivablesByAccountId(long AccountID, Eduegate.Services.Contracts.Enums.DocumentReferenceTypes docType);

        bool AddReceivables(List<ReceivableDTO> dtos);

        bool AddPayables(List<PayableDTO> dtos);

        List<PayableDTO> GetPayablesByAccountId(long AccountID, Eduegate.Services.Contracts.Enums.DocumentReferenceTypes docType);

        List<AccountTransactionHeadDTO> GetAccountTransactionHeads(DocumentReferenceTypes referenceTypes, Eduegate.Framework.Enums.TransactionStatus transactionStatus);

        List<JobEntryHeadAccountingDTO> GetAllMissionJobEntryHeads(DocumentReferenceTypes referenceTypes, Eduegate.Framework.Enums.TransactionStatus transactionStatus);

        List<ProductSKUCostDTO> GetProductSKUMapByID(long ProductSKUMapIID);

        List<KeyValueDTO> GetVendorCustomerAccounts(string searchText);

        List<KeyValueDTO> Get_AllSuppliers_Accounts(string searchText);

        List<KeyValueDTO> Get_AllCustomers_Accounts(string searchText);

        List<KeyValueDTO> Get_AllDrivers_Accounts(string searchText);

        List<KeyValueDTO> GetChildAccounts_ByParentAccountId(string searchText, long ParentAccountId);

        List<KeyValueDTO> GetGLAccounts(string searchText);

        List<KeyValueDTO> GetPaymentModes();

        List<ReceivableDTO> GetCustomerPendingInvoices(long customerID);

        List<PayableDTO> GetSupplierPendingInvoices(long suplierID);

        AccountDTO GetGLAccountByCode(string code);

        List<TransactionHeadEntitlementMapDTO> GetTransactionEntitlementByHeadId(long headId);

        List<ReceivableDTO> GetReceivables(List<long> receivableIds);

        ReceivableDTO GetAllocatedReceivables(long receivableId);

        List<PayableDTO> GetPayables(List<long> payableIds);

        List<ReceivableDTO> SaveReceivables(List<ReceivableDTO> receivables);

        List<PayableDTO> SavePayables(List<PayableDTO> payables);

        bool ClearPostedData(long accountingHeadID);
    }
}