using Eduegate.Domain;
using Eduegate.Framework.Enums;
using Eduegate.Framework.Services;
using Eduegate.Services.Contracts;
using Eduegate.Services.Contracts.Catalog;
using Eduegate.Framework.Contracts.Common;
using Eduegate.Services.Contracts.Mutual;
using Eduegate.Framework.Helper.Enums;
using Eduegate.Domain.Setting;
using Eduegate.Services.Contracts.Accounts.Accounting;
using Eduegate.Services.Contracts.Jobs;

namespace Eduegate.Services
{
    public class AccountingTransaction : BaseService, IAccountingTransaction
    {
        public CustomerAccountMapsDTO GetCustomerAccountMap(long CustomerID, int EntitlementID)
        {
            return new AccountingTransactionBL(CallContext).GetCustomerAccountMap(CustomerID, EntitlementID);
        }
        public SupplierAccountEntitlmentMapsDTO GetSupplierAccountMap(long SupplierID, int EntitlementID)
        {
            return new AccountingTransactionBL(CallContext).GetSupplierAccountMap(SupplierID, EntitlementID);
        }
        public List<ProductInventoryDTO> GetProductInventory(long skuID)
        {
            return new AccountingTransactionBL(CallContext).GetProductInventory(skuID);
        }
        public VoucherMasterDTO GetVoucher(long TransactionHeadID)
        {
            return new AccountingTransactionBL(CallContext).GetVoucher(TransactionHeadID);
        }
        public bool UpdateAccountTransactionProcessStatus(TransactionHeadDTO dto)
        {
            return new AccountingTransactionBL(CallContext).UpdateAccountTransactionProcessStatus(dto);
        }
        public List<InvetoryTransactionDTO> GetInvetoryTransactionsByTransactionHeadID(long TransactionHeadID)
        {
            return new AccountingTransactionBL(CallContext).GetInvetoryTransactionsByTransactionHeadID(TransactionHeadID);
        }
        public List<AccountDTO> GetAutoGeneratedAccounts(long AccountID, int noOfChildAccounts, string Entity, string Entitlment)
        {
            return new AccountingTransactionBL(CallContext).GetAutoGeneratedAccounts(AccountID, noOfChildAccounts, Entity, Entitlment);
        }
        public List<EntitlementMapDTO> GetEntitlementsByHeadId(long headId)
        {
            return new AccountingTransactionBL(CallContext).GetEntitlementsByHeadId(headId);
        }
        public AccountTransactionHeadDTO SaveAccountTransactionHead(AccountTransactionHeadDTO headDto)
        {
            var dto = new AccountingTransactionBL(CallContext).SaveAccountTransactionHead(headDto);

            if (dto.IsError != true)
            {
                if (dto.DocumentTypeID == (int)Eduegate.Services.Contracts.Enums.DocumentStatuses.Completed)
                {
                    var processing = new SettingBL().GetSettingValue("TransactionProcessing", TransactionProcessing.Immediate);

                    if (processing == TransactionProcessing.Immediate)
                    {
                        new TransactionEngineCore.AccountTransaction(null).StartProcess(0, 0, dto.AccountTransactionHeadIID);
                    }
                }
            }

            return dto;
        }

        public AccountTransactionHeadDTO GetAccountTransactionHeadById(long HeadID)
        {
            return new AccountingTransactionBL(CallContext).GetAccountTransactionHeadById(HeadID);
        }
        public string AdditionalExpensesTransactionsMap(List<AdditionalExpensesTransactionsMapDTO> additionalExpenseData, long accountTransactionHeadIID, long referenceID, short documentStatus)
        {
            return new AccountingTransactionBL(CallContext).AdditionalExpensesTransactionsMap(additionalExpenseData, accountTransactionHeadIID, referenceID, documentStatus);
        }
        public List<AdditionalExpensesTransactionsMapDTO> GetAdditionalExpensesTransactions(List<AdditionalExpensesTransactionsMapDTO> additionalExpenseData, long accountTransactionHeadIID, long referenceID)
        {
            return new AccountingTransactionBL(CallContext).GetAdditionalExpensesTransactions(additionalExpenseData, accountTransactionHeadIID, referenceID);
        }

        public List<ReceivableDTO> GetReceivablesByAccountId(long AccountID, Eduegate.Services.Contracts.Enums.DocumentReferenceTypes docType)
        {
            return new AccountingTransactionBL(CallContext).GetReceivablesByAccountId(AccountID, docType);
        }
        public bool AddReceivables(List<ReceivableDTO> dtos)
        {
            return new AccountingTransactionBL(CallContext).AddReceivables(dtos);
        }
        public bool AddPayables(List<PayableDTO> dtos)
        {
            return new AccountingTransactionBL(CallContext).AddPayables(dtos);
        }
        public List<PayableDTO> GetPayablesByAccountId(long AccountID, Eduegate.Services.Contracts.Enums.DocumentReferenceTypes docType)
        {
            return new AccountingTransactionBL(CallContext).GetPayablesByAccountId(AccountID, docType);
        }
        public List<AccountTransactionHeadDTO> GetAccountTransactionHeads(DocumentReferenceTypes referenceTypes, Eduegate.Framework.Enums.TransactionStatus transactionStatus)
        {
            return new AccountingTransactionBL(CallContext).GetAccountTransactionHeads(referenceTypes, transactionStatus);
        }
        public List<JobEntryHeadAccountingDTO> GetAllMissionJobEntryHeads(DocumentReferenceTypes referenceTypes, Eduegate.Framework.Enums.TransactionStatus transactionStatus)
        {
            return new AccountingTransactionBL(CallContext).GetAllMissionJobEntryHeads(referenceTypes, transactionStatus);
        }
        public List<ProductSKUCostDTO> GetProductSKUMapByID(long ProductSKUMapIID)
        {
            return new AccountingTransactionBL(CallContext).GetProductSKUMapByID(ProductSKUMapIID);
        }
        public List<KeyValueDTO> GetVendorCustomerAccounts(string searchText)
        {
            return new AccountingTransactionBL(CallContext).GetVendorCustomerAccounts(searchText);
        }
        public List<KeyValueDTO> Get_AllSuppliers_Accounts(string searchText)
        {
            return new AccountingTransactionBL(CallContext).Get_AllSuppliers_Accounts(searchText);
        }
        public List<KeyValueDTO> Get_AllCustomers_Accounts(string searchText)
        {
            return new AccountingTransactionBL(CallContext).Get_AllCustomers_Accounts(searchText);
        }
        public List<KeyValueDTO> Get_AllDrivers_Accounts(string searchText)
        {
            return new AccountingTransactionBL(CallContext).Get_AllDrivers_Accounts(searchText);
        }
        public List<KeyValueDTO> GetChildAccounts_ByParentAccountId(string searchText, long ParentAccountId)
        {
            return new AccountingTransactionBL(CallContext).GetChildAccounts_ByParentAccountId(searchText, ParentAccountId);
        }
        public List<KeyValueDTO> GetGLAccounts(string searchText)
        {
            return new AccountingTransactionBL(CallContext).GetGLAccounts(searchText);
        }
        public List<KeyValueDTO> GetPaymentModes()
        {
            return new AccountingTransactionBL(CallContext).GetPaymentModes();
        }

        public List<ReceivableDTO> GetCustomerPendingInvoices(long customerID)
        {
            return new AccountingTransactionBL(CallContext).GetCustomerPendingInvoices(customerID);
        }

        public List<PayableDTO> GetSupplierPendingInvoices(long suplierID)
        {
            return new AccountingTransactionBL(CallContext).GetSupplierPendingInvoices(suplierID);
        }

        public AccountDTO GetGLAccountByCode(string code)
        {
            return new AccountingTransactionBL(CallContext).GetGLAccountByCode(code);
        }

        public List<TransactionHeadEntitlementMapDTO> GetTransactionEntitlementByHeadId(long headId)
        {
            return new AccountingTransactionBL(CallContext).GetTransactionEntitlementByHeadId(headId);
        }

        public bool AddAccountTransactions(List<AccountTransactionsDTO> dto)
        {
            return new AccountingTransactionBL(CallContext).AddAccountTransactions(dto);
        }

        public bool DeleteAccountTransactions(List<long> dto)
        {
            return new AccountingTransactionBL(CallContext).DeleteAccountTransactions(dto);
        }

        public List<ReceivableDTO> GetReceivables(List<long> receivableIds)
        {
            return new AccountingTransactionBL(CallContext).GetReceivables(receivableIds);
        }

        public List<PayableDTO> GetPayables(List<long> payableIds)
        {
            return new AccountingTransactionBL(CallContext).GetPayables(payableIds);
        }

        public List<ReceivableDTO> SaveReceivables(List<ReceivableDTO> receivables)
        {
            return new AccountingTransactionBL(CallContext).SaveReceivables(receivables);
        }

        public List<PayableDTO> SavePayables(List<PayableDTO> payables)
        {
            return new AccountingTransactionBL(CallContext).SavePayables(payables);
        }

        public bool ClearPostedData(long accountingHeadID)
        {
            return new AccountingTransactionBL(CallContext).ClearPostedData(accountingHeadID);
        }

        public ReceivableDTO GetAllocatedReceivables(long receivableId)
        {
            return new AccountingTransactionBL(CallContext).GetAllocatedReceivables(receivableId);
        }

        public List<KeyValueDTO> GetCustomerPendingInvoices(long accountID, long? branchID)
        {
            return new AccountingTransactionBL(CallContext).GetCustomerPendingInvoices(accountID, branchID);
        }
    }
}
