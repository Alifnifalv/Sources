app.controller("AccountMapsController", ["$scope", "$compile", "$http", "$timeout", "productService", "purchaseorderService", "accountService", "$rootScope", "$controller",
    function ($scope, $compile, $http, $timeout, productService, purchaseorderService, accountService, $rootScope, $controller) {
        console.log("AccountMapsController");

        $controller('CRUDController', { $scope: $scope, $compile: $compile, $http: $http, $timeout: $timeout });

        $scope.AccountCodeChange = function (model, dataType, control, multiplesingle, currentRow, rowIndex) {
            var EntitlementArray = [];
            if (currentRow != null && currentRow.SupplierAccountEntitlements != null && currentRow.SupplierAccount != null) {
                $.each(currentRow.SupplierAccountEntitlements, function (index, item) {
                    EntitlementArray.push(item.EntitlementName);
                });

                $.ajax({
                    url: "Supplier/GetAutoGeneratedAccounts"
                    + "?AccountID=" + currentRow.SupplierAccount.Key
                    + "&noOfChildAccounts=" + currentRow.SupplierAccountEntitlements.length
                    + "&Entity=" + "Entity"
                    + "&Entitlment=" + EntitlementArray
                    ,
                    type: 'GET',
                    success: function (AccountsList) {
                        //One Base account will also be part of this array.
                        if (AccountsList != null) {
                            var nLoopIndex = 0;
                            $.each(currentRow.SupplierAccountEntitlements, function (index, item) {
                                var account = AccountsList[nLoopIndex];
                                item.AccountName = account.AccountName;
                                item.Alias = account.Alias;
                                item.ParentAccountID = account.ParentAccount.AccountID;
                                item.GroupID = account.AccountGroup.AccountGroupID;
                                item.AccountBehavior = account.AccountBehavior;

                                item.AccountID = 0;

                                nLoopIndex++;
                            });
                        }
                    }
                });
            }
        };

        $scope.LoadCustomerPendingInvoices = function (model, dataType, control, multiplesingle, currentRow, rowIndex) {
            $("#Overlay").fadeIn(100);
            $.ajax({
                url: "Accounts/RVInvoice/GetPendingInvoices"
                + "?customerID=" + currentRow.DetailAccount.Key,
                type: 'GET',
                success: function (result) {
                    if (result != null) {
                        $scope.$apply(function () {
                            $scope.CRUDModel.Model.DetailViewModel = [];
                            $.each(result, function (index, item) {                                
                                $scope.CRUDModel.Model.DetailViewModel.push({
                                    AccountID: item.AccountID,
                                    Amount: 0,
                                    InvoiceAmount: item.InvoiceAmount,
                                    InvoiceNumber: item.InvoiceNumber ,
                                    PaidAmount: item.PaidAmount ,
                                    PaymentDueDate: moment(item.TransactionDate).format(_dateFormat.toUpperCase()),
                                    ReferenceReceiptID: item.ReceivableIID,
                                    ReferencePaymentID: item.PayableIID,
                                    //Remarks: ,
                                    //SerNo: item,
                                });
                            });
                        });
                    }
                       
                    $("#Overlay").fadeOut(100);
                },
                error: function () {
                    $().showMessage($scope, $timeout, true, "Error occured!!");
                    $("#Overlay").fadeOut(100);
                }
            });
        };

        $scope.LoadSupplierPendingInvoices = function (model, dataType, control, multiplesingle, currentRow, rowIndex) {
            $("#Overlay").fadeIn(100);
            $.ajax({
                url: "Accounts/PVInvoice/GetPendingInvoices"
                + "?supplierID=" + currentRow.DetailAccount.Key,
                type: 'GET',
                success: function (result) {
                    if (result != null) {
                        $scope.$apply(function () {
                            $scope.CRUDModel.Model.DetailViewModel = [];

                            $.each(result, function (index, item) {                                
                                $scope.CRUDModel.Model.DetailViewModel.push({
                                    AccountID: item.AccountID,
                                    Amount: 0,
                                    InvoiceAmount: item.InvoiceAmount,
                                    InvoiceNumber: item.InvoiceNumber,
                                    PaidAmount: item.PaidAmount,
                                    PaymentDueDate: moment(item.TransactionDate).format(_dateFormat.toUpperCase()),
                                    ReferenceReceiptID: item.ReceivableIID,
                                    ReferencePaymentID: item.PayableIID,
                                    //Remarks: ,
                                    //SerNo: item,
                                });
                            });
                        });
                    }

                    $("#Overlay").fadeOut(100);
                },
                error: function () {
                    $().showMessage($scope, $timeout, true, "Error occured!!");
                    $("#Overlay").fadeOut(100);
                }
            });
        };

        $scope.AllocateAmount = function (model) {
            var Amount = model.MasterViewModel.Amount;
            var RemainingAmount = Amount;

            $.each(model.DetailViewModel, function (index, rowItem) {
                if (RemainingAmount > 0) {
                    rowItem.IsRowSelected = true;
                    rowItem.ReferenceNumber = model.MasterViewModel.Remarks;
                    if (RemainingAmount >= rowItem.InvoiceAmount) {
                        rowItem.Amount = rowItem.InvoiceAmount;
                        RemainingAmount = RemainingAmount - rowItem.InvoiceAmount;
                    }
                    else {
                        rowItem.Amount = RemainingAmount;
                        RemainingAmount = 0;
                    }
                }
            });

        };

        $scope.UnAllocateRowAmount = function (model) {
            if (!model.IsRowSelected) {
                model.Amount = model.PaidAmount;
                model.OldPaidAmount = model.PaidAmount;
                model.PaidAmount = 0;
            }
            else {
                if (model.OldPaidAmount) {
                    model.Amount = 0;
                    model.PaidAmount = model.OldPaidAmount;
                }
                else {
                    if (model.PaidAmount == null || model.PaidAmount == 0) {
                        model.Amount = model.InvoiceAmount;
                    }
                }
            }
        };
    }]);