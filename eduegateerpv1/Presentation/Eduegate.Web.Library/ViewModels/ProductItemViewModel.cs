using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Eduegate.Framework.Translator;
using Eduegate.Services.Contracts.Catalog;
using Eduegate.Framework.Extensions;
using Eduegate.Framework.Enums;
using Eduegate.Domain;

namespace Eduegate.Web.Library.ViewModels
{
    public class ProductItemViewModel
    {
        public decimal ProductIID { get; set; }

        public decimal ProductSKUMapIID { get; set; }

        public string ProductSKU { get; set; }

        public string CreatedOn { get; set; }

        public string ProductName { get; set; }

        public Nullable<decimal> Quantity { get; set; }

        public string PartNo { get; set; }

        public long DeliveryDays { get; set; }

        public string BarCode { get; set; }

        public string Category { get; set; }

        public string Brand { get; set; }

        public decimal ProductPrice { get; set; }

        public string Status { get; set; }

        public Nullable<decimal> UnitPrice { get; set; }

        public Nullable<decimal> CostPrice { get; set; }

        public decimal DiscountPercentage { get; set; }

        public bool IsEditPanelShow { get; set; }

        public Nullable<int> Sequence { get; set; }

        public Nullable<decimal> SellingQuantityLimit { get; set; }

        public string ImageFile { get; set; }

        public Nullable<int> CompanyID { get; set; }

        public Nullable<long> BranchID { get; set; }

        public string LocationName { get; set; }
        public Nullable<long> LocationID { get; set; }
        public string LocationBarcode { get; set; }

        public string WarrantyDate { get; set; }
        public Nullable<bool> IsSerialNumber { get; set; }

        public Nullable<bool> IsSerialNumberOnPurchase { get; set; }
        public Nullable<bool> IsSerailNumberAutoGenerated { get; set; }
       
        public string ProductTypeName { get; set; }
       
        public Nullable<decimal> ProductLength { get; set; }

        public Nullable<decimal> Weight { get; set; }

        public Nullable<decimal> DeliveryCharge { get; set; }

        public Nullable<int> TaxTemplateID { get; set; }

        public Nullable<int> TaxPercentage { get; set; }

        public Nullable<decimal> TaxAmount { get; set; }

        public bool? HasTaxInclusive { get; set; }

        private static string dateTimeFormat = new Domain.Setting.SettingBL().GetSettingValue<string>("DateTimeFormat");

        public static ProductItemViewModel ToViewModel(POSProductDTO dto)
        {
            Mapper<POSProductDTO, ProductItemViewModel>.CreateMap();
            var mapper =  Mapper<POSProductDTO, ProductItemViewModel>.Map(dto);
            mapper.WarrantyDate = mapper.WarrantyDate != null ? Convert.ToDateTime(mapper.WarrantyDate).ToString(dateTimeFormat) : null; // this is giving error please check

            return mapper;
        }

        public static List<ProductItemViewModel> FromDTOListToViewModelList(List<POSProductDTO> productDTOList, string imageHostUrl)
        {
            List<ProductItemViewModel> productVMList = new List<ProductItemViewModel>();

            if (productDTOList.IsNotNull() && productDTOList.Count > 0)
            {
                foreach (POSProductDTO posProduct in productDTOList)
                {
                    productVMList.Add(new ProductItemViewModel()
                    {
                        ProductIID = posProduct.ProductIID,
                        ProductSKUMapIID = posProduct.ProductSKUMapIID,
                        ProductSKU = posProduct.SKU,
                        ProductPrice = Convert.ToDecimal(posProduct.ProductPrice),
                        ProductName = posProduct.ProductName,
                        Sequence = Convert.ToInt32(posProduct.Sequence),
                        UnitPrice = Convert.ToDecimal(posProduct.ProductPrice),
                        CostPrice = Convert.ToDecimal(posProduct.CostPrice),
                        Quantity = posProduct.Quantity,
                        SellingQuantityLimit = posProduct.SellingQuantityLimit,
                        ImageFile = posProduct.ImageFile.IsNotNull() ? System.IO.Path.Combine(imageHostUrl, EduegateImageTypes.Products.ToString(), posProduct.ImageFile) : string.Empty,
                        BarCode = posProduct.Barcode.IsNotNullOrEmpty() ? posProduct.Barcode : posProduct.ProductCode,
                        PartNo = posProduct.PartNo,
                        CompanyID = posProduct.CompanyID,
                        BranchID = Convert.ToInt64(posProduct.BranchID),
                        LocationName = posProduct.LocationName,
                        LocationID = posProduct.LocationID,
                        IsSerialNumberOnPurchase = posProduct.IsSerialNumberOnPurchase,
                        IsSerailNumberAutoGenerated = posProduct.IsSerailNumberAutoGenerated.IsNotNull() ? posProduct.IsSerailNumberAutoGenerated : false,
                        ProductTypeName = posProduct.ProductTypeName,
                        ProductLength = posProduct.ProductLength,
                        Weight = posProduct.Weight,
                        TaxAmount = posProduct.TaxAmount,
                        TaxPercentage = posProduct.TaxPercentage,
                        TaxTemplateID = posProduct.TaxTemplateID,
                        HasTaxInclusive = posProduct.HasTaxInclusive
                    });
                }
            }

            return productVMList;
        }

    }
}