using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Eduegate.Framework;
using Eduegate.Framework.Enums;
using Eduegate.Framework.Extensions;
using Eduegate.Framework.Services;
using Eduegate.Services.Contracts;
using Eduegate.Services.Contracts.Catalog;
using Eduegate.Framework.Contracts.Common;
using Eduegate.Services.Contracts.Accounting;
using Eduegate.Services.Contracts.Mutual;
using Eduegate.Domain;

namespace Eduegate.Service.Client
{
    public class AccountingTransactionServiceClient : BaseClient, IAccountingTransaction
    {

        private static string ServiceHost { get { return new Domain.Setting.SettingBL().GetSettingValue<string>("ServiceHost"); } }
        private static string Service = string.Concat(ServiceHost, "AccountingTransaction.svc/");

        public AccountingTransactionServiceClient(CallContext callContext = null, Action<string> logger = null)
            : base(callContext, logger)
        {

        }
        public CustomerAccountMapsDTO GetCustomerAccountMap(long CustomerID, int EntitlementID)
        {
            string uri = string.Concat(Service + "\\GetCustomerAccountMap?CustomerID=" + CustomerID + "&EntitlementID=" + EntitlementID);
            return ServiceHelper.HttpGetRequest<CustomerAccountMapsDTO>(uri);
        }
        public SupplierAccountEntitlmentMapsDTO GetSupplierAccountMap(long SupplierID, int EntitlementID)
        {
            string uri = string.Concat(Service + "\\GetSupplierAccountMap?SupplierID=" + SupplierID + "&EntitlementID=" + EntitlementID);
            return ServiceHelper.HttpGetRequest<SupplierAccountEntitlmentMapsDTO>(uri);
        }
        public List<ProductInventoryDTO> GetProductInventory(long skuID)
        {
            string uri = string.Concat(Service + "\\GetProductInventory?skuID=" + skuID);
            return ServiceHelper.HttpGetRequest<List<ProductInventoryDTO>>(uri);
        }
        public bool AddAccountTransactions(List<AccountTransactionsDTO> dto)
        {
            string uri = string.Concat(Service + "\\AddAccountTransactions");
            //return ServiceHelper.HttpPostGetRequest<List<AccountTransactionsDTO>>(uri, dto);
            return ServiceHelper.HttpPostRequest(uri, dto) == "true" ? true : false;
        }
        public VoucherMasterDTO GetVoucher(long TransactionHeadID)
        {
            string uri = string.Concat(Service + "\\GetVoucher?TransactionHeadID=" + TransactionHeadID);
            return ServiceHelper.HttpGetRequest<VoucherMasterDTO>(uri);
        }

        public bool UpdateAccountTransactionProcessStatus(TransactionHeadDTO dto)
        {
            string uri = string.Concat(Service + "\\UpdateAccountTransactionProcessStatus");
            return ServiceHelper.HttpPostRequest(uri, dto) == "true" ? true : false;
        }

        public List<InvetoryTransactionDTO> GetInvetoryTransactionsByTransactionHeadID(long TransactionHeadID)
        {
            string uri = string.Concat(Service + "\\GetInvetoryTransactionsByTransactionHeadID?TransactionHeadID=" + TransactionHeadID);
            return ServiceHelper.HttpGetRequest<List<InvetoryTransactionDTO>>(uri);
        }
        public List<AccountDTO> GetAutoGeneratedAccounts(long AccountID, int noOfChildAccounts, string Entity, string Entitlment)
        {
            string uri = string.Concat(Service + "\\GetAutoGeneratedAccounts?AccountID=" + AccountID + "&noOfChildAccounts=" + noOfChildAccounts + "&Entity=" + Entity + "&Entitlment=" + Entitlment);
            return ServiceHelper.HttpGetRequest<List<AccountDTO>>(uri);
        }
        public List<EntitlementMapDTO> GetEntitlementsByHeadId(long headId)
        {
            string uri = string.Concat(Service + "\\GetEntitlementsByHeadId?headId=" + headId);
            return ServiceHelper.HttpGetRequest<List<EntitlementMapDTO>>(uri);
        }
        public AccountTransactionHeadDTO SaveAccountTransactionHead(AccountTransactionHeadDTO dto)
        {
            string uri = string.Concat(Service + "\\SaveAccountTransactionHead");
            return ServiceHelper.HttpPostGetRequest(uri, dto);
        }

        public AccountTransactionHeadDTO GetAccountTransactionHeadById(long HeadID)
        {
            string uri = string.Concat(Service + "\\GetAccountTransactionHeadById?HeadID=" + HeadID);
            return ServiceHelper.HttpGetRequest<AccountTransactionHeadDTO>(uri, _callContext, _logger);
        }
        public string AdditionalExpensesTransactionsMap(List<AdditionalExpensesTransactionsMapDTO> additionalExpenseData, long accountTransactionHeadIID, long referenceID, short documentStatus)
        {
            string uri = string.Concat(Service + "\\AdditionalExpensesTransactionsMap?additionalExpenseData=" + additionalExpenseData + "&accountTransactionHeadIID=" + accountTransactionHeadIID + "&referenceID=" + referenceID + "&documentStatus="+ documentStatus);
            return ServiceHelper.HttpGetRequest<string>(uri, _callContext, _logger);
        }
        public List<AdditionalExpensesTransactionsMapDTO> GetAdditionalExpensesTransactions(List<AdditionalExpensesTransactionsMapDTO> additionalExpenseData, long accountTransactionHeadIID, long referenceID)
        {
            string uri = string.Concat(Service + "\\AdditionalExpensesTransactionsMap?additionalExpenseData=" + additionalExpenseData + "&accountTransactionHeadIID=" + accountTransactionHeadIID + "&referenceID=" + referenceID);
            return ServiceHelper.HttpGetRequest<List<AdditionalExpensesTransactionsMapDTO>>(uri, _callContext, _logger);
        }

        public List<ReceivableDTO> GetReceivablesByAccountId(long AccountID, Eduegate.Services.Contracts.Enums.DocumentReferenceTypes docType)
        {
            string uri = string.Concat(Service + "\\GetReceivablesByAccountId?AccountID=" + AccountID + "&docType=" + docType);
            return ServiceHelper.HttpGetRequest<List<ReceivableDTO>>(uri, _callContext, _logger);
        }
        public bool AddReceivables(List<ReceivableDTO> dtos)
        {
            string uri = string.Concat(Service + "\\AddReceivables");
            return ServiceHelper.HttpPostRequest(uri, dtos) == "true" ? true : false;
        }
        public bool AddPayables(List<PayableDTO> dtos)
        {
            string uri = string.Concat(Service + "\\AddPayables");
            return ServiceHelper.HttpPostRequest(uri, dtos) == "true" ? true : false;
        }

        public List<PayableDTO> GetPayablesByAccountId(long AccountID, Eduegate.Services.Contracts.Enums.DocumentReferenceTypes docType)
        {
            string uri = string.Concat(Service + "\\GetPayablesByAccountId?AccountID=" + AccountID + "&docType=" + docType);
            return ServiceHelper.HttpGetRequest<List<PayableDTO>>(uri, _callContext, _logger);
        }

        public List<AccountTransactionHeadDTO> GetAccountTransactionHeads(DocumentReferenceTypes referenceTypes, Eduegate.Framework.Enums.TransactionStatus transactionStatus)
        {
            string uri = string.Concat(Service + "\\GetAccountTransactionHeads?referenceTypes=" + referenceTypes + "&transactionStatus=" + transactionStatus);
            return ServiceHelper.HttpGetRequest<List<AccountTransactionHeadDTO>>(uri);
        }

        public List<JobEntryHeadAccountingDTO> GetAllMissionJobEntryHeads(DocumentReferenceTypes referenceTypes, Eduegate.Framework.Enums.TransactionStatus transactionStatus)
        {
            string uri = string.Concat(Service + "\\GetAllMissionJobEntryHeads?referenceTypes=" + referenceTypes + "&transactionStatus=" + transactionStatus);
            return ServiceHelper.HttpGetRequest<List<JobEntryHeadAccountingDTO>>(uri);
        }

        public List<ProductSKUCostDTO> GetProductSKUMapByID(long ProductSKUMapIID)
        {
            string uri = string.Concat(Service + "\\GetProductSKUMapByID?ProductSKUMapIID=" + ProductSKUMapIID);
            return ServiceHelper.HttpGetRequest<List<ProductSKUCostDTO>>(uri, _callContext, _logger);
        }

        public List<KeyValueDTO> GetVendorCustomerAccounts(string searchText)
        {
            string uri = string.Concat(Service + "\\GetVendorCustomerAccounts?searchText=" + searchText);
            return ServiceHelper.HttpGetRequest<List<KeyValueDTO>>(uri);
        }

        public List<KeyValueDTO> Get_AllSuppliers_Accounts(string searchText)
        {
            string uri = string.Concat(Service + "\\Get_AllSuppliers_Accounts?searchText=" + searchText);
            return ServiceHelper.HttpGetRequest<List<KeyValueDTO>>(uri);
        }
        public List<KeyValueDTO> Get_AllCustomers_Accounts(string searchText)
        {
            string uri = string.Concat(Service + "\\Get_AllCustomers_Accounts?searchText=" + searchText);
            return ServiceHelper.HttpGetRequest<List<KeyValueDTO>>(uri);
        }
        public List<KeyValueDTO> Get_AllDrivers_Accounts(string searchText)
        {
            string uri = string.Concat(Service + "\\Get_AllDrivers_Accounts?searchText=" + searchText);
            return ServiceHelper.HttpGetRequest<List<KeyValueDTO>>(uri);
        }
        public List<KeyValueDTO> GetChildAccounts_ByParentAccountId(string searchText, long ParentAccountId)
        {
            string uri = string.Concat(Service + "\\GetChildAccounts_ByParentAccountId?searchText=" + searchText + "&ParentAccountId=" + ParentAccountId);
            return ServiceHelper.HttpGetRequest<List<KeyValueDTO>>(uri);
        }
        public List<KeyValueDTO> GetGLAccounts(string searchText)
        {
            string uri = string.Concat(Service + "\\GetGLAccounts?searchText=" + searchText);
            return ServiceHelper.HttpGetRequest<List<KeyValueDTO>>(uri);
        }
        public List<KeyValueDTO> GetPaymentModes()
        {
            string uri = string.Concat(Service + "GetPaymentModes");
            return ServiceHelper.HttpGetRequest<List<KeyValueDTO>>(uri);
        }

        public List<ReceivableDTO> GetCustomerPendingInvoices(long customerID)
        {
            string uri = string.Concat(Service + "GetCustomerPendingInvoices?customerID=" + customerID);
            return ServiceHelper.HttpGetRequest<List<ReceivableDTO>>(uri);
        }

        public List<PayableDTO> GetSupplierPendingInvoices(long suplierID)
        {
            string uri = string.Concat(Service + "GetSupplierPendingInvoices?suplierID=" + suplierID);
            return ServiceHelper.HttpGetRequest<List<PayableDTO>>(uri);
        }

        public AccountDTO GetGLAccountByCode(string code)
        {
            string uri = string.Concat(Service + "GetGLAccountByCode?code=" + code);
            return ServiceHelper.HttpGetRequest<AccountDTO>(uri);
        }

        public List<TransactionHeadEntitlementMapDTO> GetTransactionEntitlementByHeadId(long headId)
        {
            string uri = string.Concat(Service + "GetTransactionEntitlementByHeadId?headId=" + headId);
            return ServiceHelper.HttpGetRequest<List<TransactionHeadEntitlementMapDTO>>(uri);
        }

        public bool DeleteAccountTransactions(List<long> headIds)
        {
            string uri = string.Concat(Service + "DeleteAccountTransactions?headId=" + headIds);
            return ServiceHelper.HttpGetRequest<bool>(uri);
        }

        public List<ReceivableDTO> GetReceivables(List<long> receivableIds)
        {
            string uri = string.Concat(Service + "GetReceivables?receivableIds=" + receivableIds);
            return ServiceHelper.HttpGetRequest<List<ReceivableDTO>>(uri);
        }

        public List<PayableDTO> GetPayables(List<long> payableIds)
        {
            string uri = string.Concat(Service + "GetPayables?payableIds=" + payableIds);
            return ServiceHelper.HttpGetRequest<List<PayableDTO>>(uri);
        }

        public List<ReceivableDTO> SaveReceivables(List<ReceivableDTO> receivables)
        {
            string uri = string.Concat(Service + "GetPayables");
            return ServiceHelper.HttpPostGetRequest(uri, receivables, _callContext);
        }

        public List<PayableDTO> SavePayables(List<PayableDTO> payables)
        {
            string uri = string.Concat(Service + "GetPayables");
            return ServiceHelper.HttpPostGetRequest(uri, payables, _callContext);
        }

        public bool ClearPostedData(long accountingHeadID)
        {
            string uri = string.Concat(Service + "ClearPostedData?accountingHeadID=" + accountingHeadID.ToString());
            return ServiceHelper.HttpGetRequest<bool>(uri, _callContext);
        }

        public ReceivableDTO GetAllocatedReceivables(long receivableId)
        {
            string uri = string.Concat(Service + "GetAllocatedReceivables?receivableId=" + receivableId);
            return ServiceHelper.HttpGetRequest<ReceivableDTO>(uri);
        }
    }
}
