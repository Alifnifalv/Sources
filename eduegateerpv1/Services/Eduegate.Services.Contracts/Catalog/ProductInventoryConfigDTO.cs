using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using Eduegate.Domain.Entity.Models;
using Eduegate.Framework.Extensions;
using Eduegate.Framework.Contracts.Common;

namespace Eduegate.Services.Contracts.Catalog
{
    [DataContract]
    public partial class ProductInventoryConfigDTO : Eduegate.Framework.Contracts.Common.BaseMasterDTO
    {
        public ProductInventoryConfigDTO()
        {
            ProductInventoryConfigCulture = new List<ProductInventoryConfigCultureDTO>();
        }

        [DataMember]
        public long ProductInventoryConfigID { get; set; }
        [DataMember]
        public Nullable<decimal> NotifyQuantity { get; set; }
        [DataMember]
        public Nullable<decimal> MinimumQuantity { get; set; }
        [DataMember]
        public Nullable<decimal> MaximumQuantity { get; set; }
        [DataMember]
        public Nullable<decimal> MinimumQuanityInCart { get; set; }
        [DataMember]
        public Nullable<decimal> MaximumQuantityInCart { get; set; }
        [DataMember]
        public Nullable<bool> IsQuntityUseDecimals { get; set; }
        [DataMember]
        public Nullable<byte> BackOrderTypeID { get; set; }
        [DataMember]
        public Nullable<byte> IsStockAvailabiltiyID { get; set; }
        [DataMember]
        public string ProductWarranty { get; set; }
        [DataMember]
        public Nullable<bool> IsSerialNumber { get; set; }
        [DataMember]
        public Nullable<bool> IsSerialNumberRequiredForPurchase { get; set; }
        [DataMember]
        public Nullable<short> DeliveryMethod { get; set; }
        [DataMember]
        public Nullable<decimal> ProductWeight { get; set; }
        [DataMember]
        public Nullable<decimal> ProductLength { get; set; }
        [DataMember]
        public Nullable<decimal> ProductWidth { get; set; }
        [DataMember]
        public Nullable<decimal> ProductHeight { get; set; }
        [DataMember]
        public Nullable<decimal> DimensionalWeight { get; set; }
        [DataMember]
        public Nullable<long> PackingTypeID { get; set; }
        [DataMember]
        public Nullable<bool> IsMarketPlace { get; set; }
        [DataMember]
        public string HSCode { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string Details { get; set; }
        [DataMember]
        public bool IsHiddenFromList { get; set; }
        [DataMember]
        public bool HideSKU { get; set; }
        [DataMember]
        public List<ProductDeliveryCountrySettingDTO> AllowShippingfor { get; set; }
        [DataMember]
        public List<KeyValueDTO> Tags { get; set; }
        [DataMember]
        public Nullable<bool> IsNonRefundable { get; set; }
        [DataMember]
        public string GroupingKey { get; set; }
        [DataMember]
        public Nullable<bool> IsSerailNumberAutoGenerated { get; set; }
        [DataMember]
        public Nullable<int> MaxQuantityInCartForVerifiedCustomer { get; set; }
        [DataMember]
        public Nullable<int> MaxQuantityInCartForNonVerifiedCustomer { get; set; }
        [DataMember]
        public Nullable<int> MaxQuantityDuration { get; set; }
        [DataMember] 
        public Nullable<long> EmployeeID { get; set; }
        [DataMember]
        public string EmployeeName { get; set; }

        [DataMember] 
        public List<ProductInventoryConfigCultureDTO> ProductInventoryConfigCulture { get; set; }

        [DataMember]
        public List<ProductSKUCultureDataDTO> ProductSKUCultureInfo { get; set; }
    }


    public class ProductInventoryConfigMapper
    {
        public static ProductInventoryConfig ToEntity(ProductInventoryConfigDTO dto)
        {

            if (dto != null)
            {
                var entity = new ProductInventoryConfig()
                {
                    ProductInventoryConfigIID = dto.ProductInventoryConfigID,
                    NotifyQuantity = dto.NotifyQuantity,
                    MinimumQuantity = dto.MinimumQuantity,
                    MaximumQuantity = dto.MaximumQuantity,
                    MinimumQuanityInCart = dto.MinimumQuanityInCart,
                    MaximumQuantityInCart = dto.MaximumQuantityInCart,
                    IsQuntityUseDecimals = dto.IsQuntityUseDecimals,
                    BackOrderTypeID = dto.BackOrderTypeID,
                    IsStockAvailabiltiyID = dto.IsStockAvailabiltiyID,
                    ProductWarranty = dto.ProductWarranty,
                    IsSerialNumber = dto.IsSerialNumber,
                    IsSerialRequiredForPurchase = dto.IsSerialNumberRequiredForPurchase,
                    DeliveryMethod = dto.DeliveryMethod,
                    ProductWeight = dto.ProductWeight,
                    ProductLength = dto.ProductLength,
                    ProductWidth = dto.ProductWidth,
                    ProductHeight = dto.ProductHeight,
                    DimensionalWeight = dto.DimensionalWeight,
                    PackingTypeID = dto.PackingTypeID != null ? Convert.ToInt16(dto.PackingTypeID) : (short?)null,
                    IsMarketPlace = dto.IsMarketPlace,
                    HSCode = dto.HSCode,
                    Description = dto.Description,
                    Details = dto.Details,
                    IsNonRefundable = dto.IsNonRefundable,
                    GroupingKey = dto.GroupingKey,
                    IsSerailNumberAutoGenerated = dto.IsSerailNumberAutoGenerated,
                    MaxQuantityInCartForVerifiedCustomer = dto.MaxQuantityInCartForVerifiedCustomer,
                    MaxQuantityInCartForNonVerifiedCustomer = dto.MaxQuantityInCartForNonVerifiedCustomer,
                    MaxQuantityDuration = dto.MaxQuantityDuration,
                    // TimeStamps = Convert.FromBase64String(dto.TimeStamps),
                    UpdatedBy = dto.UpdatedBy,
                    UpdatedDate = DateTime.Now,
                    ProductInventoryConfigCultureDatas = ToEntityCulureList(dto),
                    EmployeeID = dto.EmployeeID.HasValue ? (long)dto.EmployeeID.Value : default(long),
            };

                if (dto.TimeStamps.IsNotNull())
                {
                    //entity.TimeStamps = Convert.FromBase64String(dto.TimeStamps);
                }
                return entity;

            }
            else return new ProductInventoryConfig();
        }

        public static ProductInventoryConfigDTO ToDto(ProductInventoryConfig entity)
        {
            if (entity != null)
            {
                return new ProductInventoryConfigDTO()
                {
                    ProductInventoryConfigID = entity.ProductInventoryConfigIID,
                    NotifyQuantity = entity.NotifyQuantity,
                    MinimumQuantity = entity.MinimumQuantity,
                    MaximumQuantity = entity.MaximumQuantity,
                    MinimumQuanityInCart = entity.MinimumQuanityInCart,
                    MaximumQuantityInCart = entity.MaximumQuantityInCart,
                    IsQuntityUseDecimals = entity.IsQuntityUseDecimals,
                    BackOrderTypeID = entity.BackOrderTypeID,
                    IsStockAvailabiltiyID = entity.IsStockAvailabiltiyID,
                    ProductWarranty = entity.ProductWarranty,
                    IsSerialNumber = entity.IsSerialNumber,
                    IsSerialNumberRequiredForPurchase = entity.IsSerialRequiredForPurchase,
                    DeliveryMethod = entity.DeliveryMethod,
                    ProductWeight = entity.ProductWeight,
                    ProductLength = entity.ProductLength,
                    ProductWidth = entity.ProductWidth,
                    ProductHeight = entity.ProductHeight,
                    DimensionalWeight = entity.DimensionalWeight,
                    PackingTypeID = entity.PackingTypeID,
                    IsMarketPlace = entity.IsMarketPlace,
                    HSCode = entity.HSCode,
                    Description = entity.Description,
                    Details = entity.Details,
                    IsNonRefundable = entity.IsNonRefundable,
                    GroupingKey = entity.GroupingKey,
                    IsSerailNumberAutoGenerated = entity.IsSerailNumberAutoGenerated,
                    MaxQuantityInCartForVerifiedCustomer = entity.MaxQuantityInCartForVerifiedCustomer,
                    MaxQuantityInCartForNonVerifiedCustomer = entity.MaxQuantityInCartForNonVerifiedCustomer,
                    MaxQuantityDuration = entity.MaxQuantityDuration,
                    //TimeStamps = Convert.ToBase64String(entity.TimeStamps),
                    UpdatedBy = entity.UpdatedBy,
                    UpdatedDate = entity.UpdatedDate,
                    CreatedBy = entity.CreatedBy,
                    CreatedDate = entity.CreatedDate,
                    EmployeeID = entity.EmployeeID.HasValue?(long)entity.EmployeeID.Value:default(long),
                    ProductInventoryConfigCulture = ToDtoConfigCulureList(entity)

                };
            }
            else return new ProductInventoryConfigDTO();
        }

        public static List<ProductInventoryConfigCultureDTO> ToDtoConfigCulureList(ProductInventoryConfig entity)
        {
            var productInventoryConfigCultureDTOList = new List<ProductInventoryConfigCultureDTO>();
            var productInventoryConfigCultureDTO = new ProductInventoryConfigCultureDTO()
            {
                CultureID = 1,
                ProductInventoryConfigID = entity.ProductInventoryConfigIID,
                Description  = entity.Description,
                Details = entity.Details
            };
            productInventoryConfigCultureDTOList.Add(productInventoryConfigCultureDTO);
            foreach (var item in entity.ProductInventoryConfigCultureDatas)
            {
                var productInventoryConfigCultureDTOItem = new ProductInventoryConfigCultureDTO()
                {
                    CultureID = item.CultureID,
                    ProductInventoryConfigID = item.ProductInventoryConfigID,
                    Description = item.Description,
                    Details = item.Details
                };
                productInventoryConfigCultureDTOList.Add(productInventoryConfigCultureDTOItem);
            }
            return productInventoryConfigCultureDTOList;
        }

        public static List<ProductInventoryConfigCultureData> ToEntityCulureList(ProductInventoryConfigDTO dto)
        {
            var productInventoryConfigCultureList = new List<ProductInventoryConfigCultureData>();
            foreach (var item in dto.ProductInventoryConfigCulture)
            {
                var productInventoryConfigCultureDTOItem = new ProductInventoryConfigCultureData()
                {
                    CultureID = item.CultureID,
                    ProductInventoryConfigID = item.ProductInventoryConfigID,
                    Description = item.Description,
                    Details = item.Details
                };
                productInventoryConfigCultureList.Add(productInventoryConfigCultureDTOItem);
            }
            return productInventoryConfigCultureList;
        }
    }
}
